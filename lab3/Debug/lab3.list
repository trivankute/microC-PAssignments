
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080032d0  080032d0  000132d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032f0  080032f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080032f0  080032f0  000132f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032f8  080032f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032f8  080032f8  000132f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032fc  080032fc  000132fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003300  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000078  08003374  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08003374  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a54f  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f49  00000000  00000000  0002a5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002c538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002d020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017123  00000000  00000000  0002d9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb71  00000000  00000000  00044ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000825f0  00000000  00000000  00051654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3c44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a28  00000000  00000000  000d3c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080032b8 	.word	0x080032b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080032b8 	.word	0x080032b8

0800014c <__aeabi_ldivmod>:
 800014c:	b97b      	cbnz	r3, 800016e <__aeabi_ldivmod+0x22>
 800014e:	b972      	cbnz	r2, 800016e <__aeabi_ldivmod+0x22>
 8000150:	2900      	cmp	r1, #0
 8000152:	bfbe      	ittt	lt
 8000154:	2000      	movlt	r0, #0
 8000156:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800015a:	e006      	blt.n	800016a <__aeabi_ldivmod+0x1e>
 800015c:	bf08      	it	eq
 800015e:	2800      	cmpeq	r0, #0
 8000160:	bf1c      	itt	ne
 8000162:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000166:	f04f 30ff 	movne.w	r0, #4294967295
 800016a:	f000 b9a1 	b.w	80004b0 <__aeabi_idiv0>
 800016e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000172:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000176:	2900      	cmp	r1, #0
 8000178:	db09      	blt.n	800018e <__aeabi_ldivmod+0x42>
 800017a:	2b00      	cmp	r3, #0
 800017c:	db1a      	blt.n	80001b4 <__aeabi_ldivmod+0x68>
 800017e:	f000 f835 	bl	80001ec <__udivmoddi4>
 8000182:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018a:	b004      	add	sp, #16
 800018c:	4770      	bx	lr
 800018e:	4240      	negs	r0, r0
 8000190:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000194:	2b00      	cmp	r3, #0
 8000196:	db1b      	blt.n	80001d0 <__aeabi_ldivmod+0x84>
 8000198:	f000 f828 	bl	80001ec <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4240      	negs	r0, r0
 80001a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ac:	4252      	negs	r2, r2
 80001ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001b2:	4770      	bx	lr
 80001b4:	4252      	negs	r2, r2
 80001b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ba:	f000 f817 	bl	80001ec <__udivmoddi4>
 80001be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c6:	b004      	add	sp, #16
 80001c8:	4240      	negs	r0, r0
 80001ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ce:	4770      	bx	lr
 80001d0:	4252      	negs	r2, r2
 80001d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001d6:	f000 f809 	bl	80001ec <__udivmoddi4>
 80001da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001e2:	b004      	add	sp, #16
 80001e4:	4252      	negs	r2, r2
 80001e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ea:	4770      	bx	lr

080001ec <__udivmoddi4>:
 80001ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f0:	9e08      	ldr	r6, [sp, #32]
 80001f2:	460d      	mov	r5, r1
 80001f4:	4604      	mov	r4, r0
 80001f6:	468e      	mov	lr, r1
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	f040 8083 	bne.w	8000304 <__udivmoddi4+0x118>
 80001fe:	428a      	cmp	r2, r1
 8000200:	4617      	mov	r7, r2
 8000202:	d947      	bls.n	8000294 <__udivmoddi4+0xa8>
 8000204:	fab2 f382 	clz	r3, r2
 8000208:	b14b      	cbz	r3, 800021e <__udivmoddi4+0x32>
 800020a:	f1c3 0120 	rsb	r1, r3, #32
 800020e:	fa05 fe03 	lsl.w	lr, r5, r3
 8000212:	fa20 f101 	lsr.w	r1, r0, r1
 8000216:	409f      	lsls	r7, r3
 8000218:	ea41 0e0e 	orr.w	lr, r1, lr
 800021c:	409c      	lsls	r4, r3
 800021e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000222:	fbbe fcf8 	udiv	ip, lr, r8
 8000226:	fa1f f987 	uxth.w	r9, r7
 800022a:	fb08 e21c 	mls	r2, r8, ip, lr
 800022e:	fb0c f009 	mul.w	r0, ip, r9
 8000232:	0c21      	lsrs	r1, r4, #16
 8000234:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000238:	4290      	cmp	r0, r2
 800023a:	d90a      	bls.n	8000252 <__udivmoddi4+0x66>
 800023c:	18ba      	adds	r2, r7, r2
 800023e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000242:	f080 8118 	bcs.w	8000476 <__udivmoddi4+0x28a>
 8000246:	4290      	cmp	r0, r2
 8000248:	f240 8115 	bls.w	8000476 <__udivmoddi4+0x28a>
 800024c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000250:	443a      	add	r2, r7
 8000252:	1a12      	subs	r2, r2, r0
 8000254:	fbb2 f0f8 	udiv	r0, r2, r8
 8000258:	fb08 2210 	mls	r2, r8, r0, r2
 800025c:	fb00 f109 	mul.w	r1, r0, r9
 8000260:	b2a4      	uxth	r4, r4
 8000262:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000266:	42a1      	cmp	r1, r4
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x92>
 800026a:	193c      	adds	r4, r7, r4
 800026c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000270:	f080 8103 	bcs.w	800047a <__udivmoddi4+0x28e>
 8000274:	42a1      	cmp	r1, r4
 8000276:	f240 8100 	bls.w	800047a <__udivmoddi4+0x28e>
 800027a:	3802      	subs	r0, #2
 800027c:	443c      	add	r4, r7
 800027e:	1a64      	subs	r4, r4, r1
 8000280:	2100      	movs	r1, #0
 8000282:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000286:	b11e      	cbz	r6, 8000290 <__udivmoddi4+0xa4>
 8000288:	2200      	movs	r2, #0
 800028a:	40dc      	lsrs	r4, r3
 800028c:	e9c6 4200 	strd	r4, r2, [r6]
 8000290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xac>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f382 	clz	r3, r2
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14f      	bne.n	8000340 <__udivmoddi4+0x154>
 80002a0:	1a8d      	subs	r5, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80002a8:	fa1f f882 	uxth.w	r8, r2
 80002ac:	fbb5 fcfe 	udiv	ip, r5, lr
 80002b0:	fb0e 551c 	mls	r5, lr, ip, r5
 80002b4:	fb08 f00c 	mul.w	r0, r8, ip
 80002b8:	0c22      	lsrs	r2, r4, #16
 80002ba:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d907      	bls.n	80002d2 <__udivmoddi4+0xe6>
 80002c2:	197d      	adds	r5, r7, r5
 80002c4:	f10c 32ff 	add.w	r2, ip, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0xe4>
 80002ca:	42a8      	cmp	r0, r5
 80002cc:	f200 80e9 	bhi.w	80004a2 <__udivmoddi4+0x2b6>
 80002d0:	4694      	mov	ip, r2
 80002d2:	1a2d      	subs	r5, r5, r0
 80002d4:	fbb5 f0fe 	udiv	r0, r5, lr
 80002d8:	fb0e 5510 	mls	r5, lr, r0, r5
 80002dc:	fb08 f800 	mul.w	r8, r8, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e6:	45a0      	cmp	r8, r4
 80002e8:	d907      	bls.n	80002fa <__udivmoddi4+0x10e>
 80002ea:	193c      	adds	r4, r7, r4
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x10c>
 80002f2:	45a0      	cmp	r8, r4
 80002f4:	f200 80d9 	bhi.w	80004aa <__udivmoddi4+0x2be>
 80002f8:	4610      	mov	r0, r2
 80002fa:	eba4 0408 	sub.w	r4, r4, r8
 80002fe:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000302:	e7c0      	b.n	8000286 <__udivmoddi4+0x9a>
 8000304:	428b      	cmp	r3, r1
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x12e>
 8000308:	2e00      	cmp	r6, #0
 800030a:	f000 80b1 	beq.w	8000470 <__udivmoddi4+0x284>
 800030e:	2100      	movs	r1, #0
 8000310:	e9c6 0500 	strd	r0, r5, [r6]
 8000314:	4608      	mov	r0, r1
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d14b      	bne.n	80003ba <__udivmoddi4+0x1ce>
 8000322:	42ab      	cmp	r3, r5
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0x140>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80b9 	bhi.w	800049e <__udivmoddi4+0x2b2>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb65 0303 	sbc.w	r3, r5, r3
 8000332:	2001      	movs	r0, #1
 8000334:	469e      	mov	lr, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d0aa      	beq.n	8000290 <__udivmoddi4+0xa4>
 800033a:	e9c6 4e00 	strd	r4, lr, [r6]
 800033e:	e7a7      	b.n	8000290 <__udivmoddi4+0xa4>
 8000340:	409f      	lsls	r7, r3
 8000342:	f1c3 0220 	rsb	r2, r3, #32
 8000346:	40d1      	lsrs	r1, r2
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000350:	fa1f f887 	uxth.w	r8, r7
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	fa24 f202 	lsr.w	r2, r4, r2
 800035c:	409d      	lsls	r5, r3
 800035e:	fb00 fc08 	mul.w	ip, r0, r8
 8000362:	432a      	orrs	r2, r5
 8000364:	0c15      	lsrs	r5, r2, #16
 8000366:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800036a:	45ac      	cmp	ip, r5
 800036c:	fa04 f403 	lsl.w	r4, r4, r3
 8000370:	d909      	bls.n	8000386 <__udivmoddi4+0x19a>
 8000372:	197d      	adds	r5, r7, r5
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	f080 808f 	bcs.w	800049a <__udivmoddi4+0x2ae>
 800037c:	45ac      	cmp	ip, r5
 800037e:	f240 808c 	bls.w	800049a <__udivmoddi4+0x2ae>
 8000382:	3802      	subs	r0, #2
 8000384:	443d      	add	r5, r7
 8000386:	eba5 050c 	sub.w	r5, r5, ip
 800038a:	fbb5 f1fe 	udiv	r1, r5, lr
 800038e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000392:	fb01 f908 	mul.w	r9, r1, r8
 8000396:	b295      	uxth	r5, r2
 8000398:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800039c:	45a9      	cmp	r9, r5
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x1c4>
 80003a0:	197d      	adds	r5, r7, r5
 80003a2:	f101 32ff 	add.w	r2, r1, #4294967295
 80003a6:	d274      	bcs.n	8000492 <__udivmoddi4+0x2a6>
 80003a8:	45a9      	cmp	r9, r5
 80003aa:	d972      	bls.n	8000492 <__udivmoddi4+0x2a6>
 80003ac:	3902      	subs	r1, #2
 80003ae:	443d      	add	r5, r7
 80003b0:	eba5 0509 	sub.w	r5, r5, r9
 80003b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003b8:	e778      	b.n	80002ac <__udivmoddi4+0xc0>
 80003ba:	f1c1 0720 	rsb	r7, r1, #32
 80003be:	408b      	lsls	r3, r1
 80003c0:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c4:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c8:	fa25 f407 	lsr.w	r4, r5, r7
 80003cc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003d0:	fbb4 f9fe 	udiv	r9, r4, lr
 80003d4:	fa1f f88c 	uxth.w	r8, ip
 80003d8:	fb0e 4419 	mls	r4, lr, r9, r4
 80003dc:	fa20 f307 	lsr.w	r3, r0, r7
 80003e0:	fb09 fa08 	mul.w	sl, r9, r8
 80003e4:	408d      	lsls	r5, r1
 80003e6:	431d      	orrs	r5, r3
 80003e8:	0c2b      	lsrs	r3, r5, #16
 80003ea:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	fa02 f201 	lsl.w	r2, r2, r1
 80003f4:	fa00 f301 	lsl.w	r3, r0, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x222>
 80003fa:	eb1c 0404 	adds.w	r4, ip, r4
 80003fe:	f109 30ff 	add.w	r0, r9, #4294967295
 8000402:	d248      	bcs.n	8000496 <__udivmoddi4+0x2aa>
 8000404:	45a2      	cmp	sl, r4
 8000406:	d946      	bls.n	8000496 <__udivmoddi4+0x2aa>
 8000408:	f1a9 0902 	sub.w	r9, r9, #2
 800040c:	4464      	add	r4, ip
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	fbb4 f0fe 	udiv	r0, r4, lr
 8000416:	fb0e 4410 	mls	r4, lr, r0, r4
 800041a:	fb00 fa08 	mul.w	sl, r0, r8
 800041e:	b2ad      	uxth	r5, r5
 8000420:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000424:	45a2      	cmp	sl, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x24e>
 8000428:	eb1c 0404 	adds.w	r4, ip, r4
 800042c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000430:	d22d      	bcs.n	800048e <__udivmoddi4+0x2a2>
 8000432:	45a2      	cmp	sl, r4
 8000434:	d92b      	bls.n	800048e <__udivmoddi4+0x2a2>
 8000436:	3802      	subs	r0, #2
 8000438:	4464      	add	r4, ip
 800043a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043e:	fba0 8902 	umull	r8, r9, r0, r2
 8000442:	eba4 040a 	sub.w	r4, r4, sl
 8000446:	454c      	cmp	r4, r9
 8000448:	46c6      	mov	lr, r8
 800044a:	464d      	mov	r5, r9
 800044c:	d319      	bcc.n	8000482 <__udivmoddi4+0x296>
 800044e:	d016      	beq.n	800047e <__udivmoddi4+0x292>
 8000450:	b15e      	cbz	r6, 800046a <__udivmoddi4+0x27e>
 8000452:	ebb3 020e 	subs.w	r2, r3, lr
 8000456:	eb64 0405 	sbc.w	r4, r4, r5
 800045a:	fa04 f707 	lsl.w	r7, r4, r7
 800045e:	fa22 f301 	lsr.w	r3, r2, r1
 8000462:	431f      	orrs	r7, r3
 8000464:	40cc      	lsrs	r4, r1
 8000466:	e9c6 7400 	strd	r7, r4, [r6]
 800046a:	2100      	movs	r1, #0
 800046c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000470:	4631      	mov	r1, r6
 8000472:	4630      	mov	r0, r6
 8000474:	e70c      	b.n	8000290 <__udivmoddi4+0xa4>
 8000476:	468c      	mov	ip, r1
 8000478:	e6eb      	b.n	8000252 <__udivmoddi4+0x66>
 800047a:	4610      	mov	r0, r2
 800047c:	e6ff      	b.n	800027e <__udivmoddi4+0x92>
 800047e:	4543      	cmp	r3, r8
 8000480:	d2e6      	bcs.n	8000450 <__udivmoddi4+0x264>
 8000482:	ebb8 0e02 	subs.w	lr, r8, r2
 8000486:	eb69 050c 	sbc.w	r5, r9, ip
 800048a:	3801      	subs	r0, #1
 800048c:	e7e0      	b.n	8000450 <__udivmoddi4+0x264>
 800048e:	4628      	mov	r0, r5
 8000490:	e7d3      	b.n	800043a <__udivmoddi4+0x24e>
 8000492:	4611      	mov	r1, r2
 8000494:	e78c      	b.n	80003b0 <__udivmoddi4+0x1c4>
 8000496:	4681      	mov	r9, r0
 8000498:	e7b9      	b.n	800040e <__udivmoddi4+0x222>
 800049a:	4608      	mov	r0, r1
 800049c:	e773      	b.n	8000386 <__udivmoddi4+0x19a>
 800049e:	4608      	mov	r0, r1
 80004a0:	e749      	b.n	8000336 <__udivmoddi4+0x14a>
 80004a2:	f1ac 0c02 	sub.w	ip, ip, #2
 80004a6:	443d      	add	r5, r7
 80004a8:	e713      	b.n	80002d2 <__udivmoddi4+0xe6>
 80004aa:	3802      	subs	r0, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	e724      	b.n	80002fa <__udivmoddi4+0x10e>

080004b0 <__aeabi_idiv0>:
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop

080004b4 <setTimer_12_leds>:
#include "12_leds_timer.h"

int _12_leds_flag;
int _12_leds_counter;

void setTimer_12_leds(int duration){
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	_12_leds_counter = duration/time_interupt_duration;
 80004bc:	4b07      	ldr	r3, [pc, #28]	; (80004dc <setTimer_12_leds+0x28>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80004c6:	4a06      	ldr	r2, [pc, #24]	; (80004e0 <setTimer_12_leds+0x2c>)
 80004c8:	6013      	str	r3, [r2, #0]
	_12_leds_flag = 0;
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <setTimer_12_leds+0x30>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	200000e0 	.word	0x200000e0
 80004e0:	200000c4 	.word	0x200000c4
 80004e4:	200000c8 	.word	0x200000c8

080004e8 <timer_12_leds_run>:
void timer_12_leds_run(void){
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
	if(_12_leds_counter>0)
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <timer_12_leds_run+0x2c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	dd0b      	ble.n	800050c <timer_12_leds_run+0x24>
	{
		_12_leds_counter--;
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <timer_12_leds_run+0x2c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	3b01      	subs	r3, #1
 80004fa:	4a06      	ldr	r2, [pc, #24]	; (8000514 <timer_12_leds_run+0x2c>)
 80004fc:	6013      	str	r3, [r2, #0]
		if(_12_leds_counter<=0) _12_leds_flag=1;
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <timer_12_leds_run+0x2c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	dc02      	bgt.n	800050c <timer_12_leds_run+0x24>
 8000506:	4b04      	ldr	r3, [pc, #16]	; (8000518 <timer_12_leds_run+0x30>)
 8000508:	2201      	movs	r2, #1
 800050a:	601a      	str	r2, [r3, #0]
	}
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	200000c4 	.word	0x200000c4
 8000518:	200000c8 	.word	0x200000c8

0800051c <display7SEG_1>:
#include "display_7_segments.h"
#include "main.h"


void display7SEG_1(int counter)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	; 0x28
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	  int a = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	627b      	str	r3, [r7, #36]	; 0x24
	  int b = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	623b      	str	r3, [r7, #32]
	  int c = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	61fb      	str	r3, [r7, #28]
	  int d = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	61bb      	str	r3, [r7, #24]
	  int e = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
	  int f = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	613b      	str	r3, [r7, #16]
	  int g = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b09      	cmp	r3, #9
 8000544:	f200 80ae 	bhi.w	80006a4 <display7SEG_1+0x188>
 8000548:	a201      	add	r2, pc, #4	; (adr r2, 8000550 <display7SEG_1+0x34>)
 800054a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800054e:	bf00      	nop
 8000550:	08000579 	.word	0x08000579
 8000554:	08000597 	.word	0x08000597
 8000558:	080005b5 	.word	0x080005b5
 800055c:	080005d3 	.word	0x080005d3
 8000560:	080005f1 	.word	0x080005f1
 8000564:	0800060f 	.word	0x0800060f
 8000568:	0800062d 	.word	0x0800062d
 800056c:	0800064b 	.word	0x0800064b
 8000570:	08000669 	.word	0x08000669
 8000574:	08000687 	.word	0x08000687
	  switch(counter){
		  case 0:
			  a=0;b=0;c=0;d=0;e=0;f=0;g=1;
 8000578:	2300      	movs	r3, #0
 800057a:	627b      	str	r3, [r7, #36]	; 0x24
 800057c:	2300      	movs	r3, #0
 800057e:	623b      	str	r3, [r7, #32]
 8000580:	2300      	movs	r3, #0
 8000582:	61fb      	str	r3, [r7, #28]
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	2300      	movs	r3, #0
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	2301      	movs	r3, #1
 8000592:	60fb      	str	r3, [r7, #12]
			  break;
 8000594:	e095      	b.n	80006c2 <display7SEG_1+0x1a6>
		  case 1:
			  a=1;b=0;c=0;d=1;e=1;f=1;g=1;
 8000596:	2301      	movs	r3, #1
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
 800059a:	2300      	movs	r3, #0
 800059c:	623b      	str	r3, [r7, #32]
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
 80005a6:	2301      	movs	r3, #1
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	2301      	movs	r3, #1
 80005ac:	613b      	str	r3, [r7, #16]
 80005ae:	2301      	movs	r3, #1
 80005b0:	60fb      	str	r3, [r7, #12]
			  break;
 80005b2:	e086      	b.n	80006c2 <display7SEG_1+0x1a6>
		  case 2:
			  a=0;b=0;c=1;d=0;e=0;f=1;g=0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
 80005bc:	2301      	movs	r3, #1
 80005be:	61fb      	str	r3, [r7, #28]
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	2301      	movs	r3, #1
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
			  break;
 80005d0:	e077      	b.n	80006c2 <display7SEG_1+0x1a6>
		  case 3:
			  a=0;b=0;c=0;d=0;e=1;f=1;g=0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
 80005d6:	2300      	movs	r3, #0
 80005d8:	623b      	str	r3, [r7, #32]
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
 80005e2:	2301      	movs	r3, #1
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	2301      	movs	r3, #1
 80005e8:	613b      	str	r3, [r7, #16]
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
			  break;
 80005ee:	e068      	b.n	80006c2 <display7SEG_1+0x1a6>
		  case 4:
			  a=1;b=0;c=0;d=1;e=1;f=0;g=0;
 80005f0:	2301      	movs	r3, #1
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
 80005f4:	2300      	movs	r3, #0
 80005f6:	623b      	str	r3, [r7, #32]
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
 80005fc:	2301      	movs	r3, #1
 80005fe:	61bb      	str	r3, [r7, #24]
 8000600:	2301      	movs	r3, #1
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
			  break;
 800060c:	e059      	b.n	80006c2 <display7SEG_1+0x1a6>
		  case 5:
			  a=0;b=1;c=0;d=0;e=1;f=0;g=0;
 800060e:	2300      	movs	r3, #0
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
 8000612:	2301      	movs	r3, #1
 8000614:	623b      	str	r3, [r7, #32]
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
 800061e:	2301      	movs	r3, #1
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
			  break;
 800062a:	e04a      	b.n	80006c2 <display7SEG_1+0x1a6>
		  case 6:
			  a=0;b=1;c=0;d=0;e=0;f=0;g=0;
 800062c:	2300      	movs	r3, #0
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
 8000630:	2301      	movs	r3, #1
 8000632:	623b      	str	r3, [r7, #32]
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
			  break;
 8000648:	e03b      	b.n	80006c2 <display7SEG_1+0x1a6>
		  case 7:
			  a=0;b=0;c=0;d=1;e=1;f=1;g=1;
 800064a:	2300      	movs	r3, #0
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
 800064e:	2300      	movs	r3, #0
 8000650:	623b      	str	r3, [r7, #32]
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
 8000656:	2301      	movs	r3, #1
 8000658:	61bb      	str	r3, [r7, #24]
 800065a:	2301      	movs	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	2301      	movs	r3, #1
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	2301      	movs	r3, #1
 8000664:	60fb      	str	r3, [r7, #12]
			  break;
 8000666:	e02c      	b.n	80006c2 <display7SEG_1+0x1a6>
		  case 8:
			  a=0;b=0;c=0;d=0;e=0;f=0;g=0;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
			  break;
 8000684:	e01d      	b.n	80006c2 <display7SEG_1+0x1a6>
		  case 9:
			  a=0;b=0;c=0;d=0;e=1;f=0;g=0;
 8000686:	2300      	movs	r3, #0
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
 800068a:	2300      	movs	r3, #0
 800068c:	623b      	str	r3, [r7, #32]
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
 8000696:	2301      	movs	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
			  break;
 80006a2:	e00e      	b.n	80006c2 <display7SEG_1+0x1a6>
		  default:
			  a=1;b=1;c=1;d=1;e=1;f=1;g=1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
 80006a8:	2301      	movs	r3, #1
 80006aa:	623b      	str	r3, [r7, #32]
 80006ac:	2301      	movs	r3, #1
 80006ae:	61fb      	str	r3, [r7, #28]
 80006b0:	2301      	movs	r3, #1
 80006b2:	61bb      	str	r3, [r7, #24]
 80006b4:	2301      	movs	r3, #1
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	2301      	movs	r3, #1
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	2301      	movs	r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
			  break;
 80006c0:	bf00      	nop
	  }
	  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, a);
 80006c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	461a      	mov	r2, r3
 80006c8:	2101      	movs	r1, #1
 80006ca:	4818      	ldr	r0, [pc, #96]	; (800072c <display7SEG_1+0x210>)
 80006cc:	f001 fdcb 	bl	8002266 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, b);
 80006d0:	6a3b      	ldr	r3, [r7, #32]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	461a      	mov	r2, r3
 80006d6:	2102      	movs	r1, #2
 80006d8:	4814      	ldr	r0, [pc, #80]	; (800072c <display7SEG_1+0x210>)
 80006da:	f001 fdc4 	bl	8002266 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, c);
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	461a      	mov	r2, r3
 80006e4:	2104      	movs	r1, #4
 80006e6:	4811      	ldr	r0, [pc, #68]	; (800072c <display7SEG_1+0x210>)
 80006e8:	f001 fdbd 	bl	8002266 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, d);
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	461a      	mov	r2, r3
 80006f2:	2108      	movs	r1, #8
 80006f4:	480d      	ldr	r0, [pc, #52]	; (800072c <display7SEG_1+0x210>)
 80006f6:	f001 fdb6 	bl	8002266 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, e);
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	461a      	mov	r2, r3
 8000700:	2110      	movs	r1, #16
 8000702:	480a      	ldr	r0, [pc, #40]	; (800072c <display7SEG_1+0x210>)
 8000704:	f001 fdaf 	bl	8002266 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, f);
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	461a      	mov	r2, r3
 800070e:	2120      	movs	r1, #32
 8000710:	4806      	ldr	r0, [pc, #24]	; (800072c <display7SEG_1+0x210>)
 8000712:	f001 fda8 	bl	8002266 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, g);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	461a      	mov	r2, r3
 800071c:	2140      	movs	r1, #64	; 0x40
 800071e:	4803      	ldr	r0, [pc, #12]	; (800072c <display7SEG_1+0x210>)
 8000720:	f001 fda1 	bl	8002266 <HAL_GPIO_WritePin>
}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	; 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40010c00 	.word	0x40010c00

08000730 <display7SEG_2>:

void display7SEG_2(int counter)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	  int a = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
	  int b = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
	  int c = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
	  int d = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
	  int e = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
	  int f = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
	  int g = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b09      	cmp	r3, #9
 8000758:	f200 80ae 	bhi.w	80008b8 <display7SEG_2+0x188>
 800075c:	a201      	add	r2, pc, #4	; (adr r2, 8000764 <display7SEG_2+0x34>)
 800075e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000762:	bf00      	nop
 8000764:	0800078d 	.word	0x0800078d
 8000768:	080007ab 	.word	0x080007ab
 800076c:	080007c9 	.word	0x080007c9
 8000770:	080007e7 	.word	0x080007e7
 8000774:	08000805 	.word	0x08000805
 8000778:	08000823 	.word	0x08000823
 800077c:	08000841 	.word	0x08000841
 8000780:	0800085f 	.word	0x0800085f
 8000784:	0800087d 	.word	0x0800087d
 8000788:	0800089b 	.word	0x0800089b
	  switch(counter){
		  case 0:
			  a=0;b=0;c=0;d=0;e=0;f=0;g=1;
 800078c:	2300      	movs	r3, #0
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	2301      	movs	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
			  break;
 80007a8:	e095      	b.n	80008d6 <display7SEG_2+0x1a6>
		  case 1:
			  a=1;b=0;c=0;d=1;e=1;f=1;g=1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
 80007b6:	2301      	movs	r3, #1
 80007b8:	61bb      	str	r3, [r7, #24]
 80007ba:	2301      	movs	r3, #1
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	2301      	movs	r3, #1
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	2301      	movs	r3, #1
 80007c4:	60fb      	str	r3, [r7, #12]
			  break;
 80007c6:	e086      	b.n	80008d6 <display7SEG_2+0x1a6>
		  case 2:
			  a=0;b=0;c=1;d=0;e=0;f=1;g=0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
 80007d0:	2301      	movs	r3, #1
 80007d2:	61fb      	str	r3, [r7, #28]
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	2301      	movs	r3, #1
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
			  break;
 80007e4:	e077      	b.n	80008d6 <display7SEG_2+0x1a6>
		  case 3:
			  a=0;b=0;c=0;d=0;e=1;f=1;g=0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
 80007f6:	2301      	movs	r3, #1
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	2301      	movs	r3, #1
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
			  break;
 8000802:	e068      	b.n	80008d6 <display7SEG_2+0x1a6>
		  case 4:
			  a=1;b=0;c=0;d=1;e=1;f=0;g=0;
 8000804:	2301      	movs	r3, #1
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
 8000810:	2301      	movs	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
 8000814:	2301      	movs	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
			  break;
 8000820:	e059      	b.n	80008d6 <display7SEG_2+0x1a6>
		  case 5:
			  a=0;b=1;c=0;d=0;e=1;f=0;g=0;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
 8000832:	2301      	movs	r3, #1
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
			  break;
 800083e:	e04a      	b.n	80008d6 <display7SEG_2+0x1a6>
		  case 6:
			  a=0;b=1;c=0;d=0;e=0;f=0;g=0;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
 8000844:	2301      	movs	r3, #1
 8000846:	623b      	str	r3, [r7, #32]
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
			  break;
 800085c:	e03b      	b.n	80008d6 <display7SEG_2+0x1a6>
		  case 7:
			  a=0;b=0;c=0;d=1;e=1;f=1;g=1;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
 800086a:	2301      	movs	r3, #1
 800086c:	61bb      	str	r3, [r7, #24]
 800086e:	2301      	movs	r3, #1
 8000870:	617b      	str	r3, [r7, #20]
 8000872:	2301      	movs	r3, #1
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	2301      	movs	r3, #1
 8000878:	60fb      	str	r3, [r7, #12]
			  break;
 800087a:	e02c      	b.n	80008d6 <display7SEG_2+0x1a6>
		  case 8:
			  a=0;b=0;c=0;d=0;e=0;f=0;g=0;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
			  break;
 8000898:	e01d      	b.n	80008d6 <display7SEG_2+0x1a6>
		  case 9:
			  a=0;b=0;c=0;d=0;e=1;f=0;g=0;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
 80008aa:	2301      	movs	r3, #1
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
			  break;
 80008b6:	e00e      	b.n	80008d6 <display7SEG_2+0x1a6>
		  default:
			  a=1;b=1;c=1;d=1;e=1;f=1;g=1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
 80008c0:	2301      	movs	r3, #1
 80008c2:	61fb      	str	r3, [r7, #28]
 80008c4:	2301      	movs	r3, #1
 80008c6:	61bb      	str	r3, [r7, #24]
 80008c8:	2301      	movs	r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	2301      	movs	r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	2301      	movs	r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
			  break;
 80008d4:	bf00      	nop
	  }
	  HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, a);
 80008d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	461a      	mov	r2, r3
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	481b      	ldr	r0, [pc, #108]	; (800094c <display7SEG_2+0x21c>)
 80008e0:	f001 fcc1 	bl	8002266 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, b);
 80008e4:	6a3b      	ldr	r3, [r7, #32]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	461a      	mov	r2, r3
 80008ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ee:	4817      	ldr	r0, [pc, #92]	; (800094c <display7SEG_2+0x21c>)
 80008f0:	f001 fcb9 	bl	8002266 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, c);
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	461a      	mov	r2, r3
 80008fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008fe:	4813      	ldr	r0, [pc, #76]	; (800094c <display7SEG_2+0x21c>)
 8000900:	f001 fcb1 	bl	8002266 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, d);
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	461a      	mov	r2, r3
 800090a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800090e:	480f      	ldr	r0, [pc, #60]	; (800094c <display7SEG_2+0x21c>)
 8000910:	f001 fca9 	bl	8002266 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, e);
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	461a      	mov	r2, r3
 800091a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800091e:	480b      	ldr	r0, [pc, #44]	; (800094c <display7SEG_2+0x21c>)
 8000920:	f001 fca1 	bl	8002266 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, f);
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	461a      	mov	r2, r3
 800092a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092e:	4807      	ldr	r0, [pc, #28]	; (800094c <display7SEG_2+0x21c>)
 8000930:	f001 fc99 	bl	8002266 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, g);
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	461a      	mov	r2, r3
 800093a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800093e:	4803      	ldr	r0, [pc, #12]	; (800094c <display7SEG_2+0x21c>)
 8000940:	f001 fc91 	bl	8002266 <HAL_GPIO_WritePin>
}
 8000944:	bf00      	nop
 8000946:	3728      	adds	r7, #40	; 0x28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40010c00 	.word	0x40010c00

08000950 <convert_num_to_display7>:

void convert_num_to_display7 (int counter){
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	if(counter>9)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b09      	cmp	r3, #9
 800095c:	dd1b      	ble.n	8000996 <convert_num_to_display7+0x46>
	{
	int firstNum = counter/10;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a12      	ldr	r2, [pc, #72]	; (80009ac <convert_num_to_display7+0x5c>)
 8000962:	fb82 1203 	smull	r1, r2, r2, r3
 8000966:	1092      	asrs	r2, r2, #2
 8000968:	17db      	asrs	r3, r3, #31
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	60fb      	str	r3, [r7, #12]
	int secondNum = counter%10;
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <convert_num_to_display7+0x5c>)
 8000972:	fb83 1302 	smull	r1, r3, r3, r2
 8000976:	1099      	asrs	r1, r3, #2
 8000978:	17d3      	asrs	r3, r2, #31
 800097a:	1ac9      	subs	r1, r1, r3
 800097c:	460b      	mov	r3, r1
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	440b      	add	r3, r1
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	60bb      	str	r3, [r7, #8]
	display7SEG_1(firstNum);
 8000988:	68f8      	ldr	r0, [r7, #12]
 800098a:	f7ff fdc7 	bl	800051c <display7SEG_1>
	display7SEG_2(secondNum);
 800098e:	68b8      	ldr	r0, [r7, #8]
 8000990:	f7ff fece 	bl	8000730 <display7SEG_2>
	}
	else {
		display7SEG_1(10);
		display7SEG_2(counter);
	}
}
 8000994:	e005      	b.n	80009a2 <convert_num_to_display7+0x52>
		display7SEG_1(10);
 8000996:	200a      	movs	r0, #10
 8000998:	f7ff fdc0 	bl	800051c <display7SEG_1>
		display7SEG_2(counter);
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff fec7 	bl	8000730 <display7SEG_2>
}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	66666667 	.word	0x66666667

080009b0 <setTimer_7_segments_counter>:
#include "display_7_segments_timer.h"
#include "main.h"
int _7_segments_counter = 0;
int _7_segments_turn = 1;
int _7_segments_flag=0;
void setTimer_7_segments_counter(int duration) {
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	_7_segments_counter = duration/time_interupt_duration;
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <setTimer_7_segments_counter+0x28>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	fb92 f3f3 	sdiv	r3, r2, r3
 80009c2:	4a06      	ldr	r2, [pc, #24]	; (80009dc <setTimer_7_segments_counter+0x2c>)
 80009c4:	6013      	str	r3, [r2, #0]
	_7_segments_flag=0;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <setTimer_7_segments_counter+0x30>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	200000e0 	.word	0x200000e0
 80009dc:	20000094 	.word	0x20000094
 80009e0:	20000098 	.word	0x20000098

080009e4 <timer_7_segments_counter_run>:
void timer_7_segments_counter_run(void) {
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
	if(_7_segments_counter>0)
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <timer_7_segments_counter_run+0x44>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	dd17      	ble.n	8000a20 <timer_7_segments_counter_run+0x3c>
	{
		_7_segments_counter--;
 80009f0:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <timer_7_segments_counter_run+0x44>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	3b01      	subs	r3, #1
 80009f6:	4a0c      	ldr	r2, [pc, #48]	; (8000a28 <timer_7_segments_counter_run+0x44>)
 80009f8:	6013      	str	r3, [r2, #0]
			if(_7_segments_counter<=0)
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <timer_7_segments_counter_run+0x44>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	dc0e      	bgt.n	8000a20 <timer_7_segments_counter_run+0x3c>
			{
				_7_segments_flag=1;
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <timer_7_segments_counter_run+0x48>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	601a      	str	r2, [r3, #0]
				_7_segments_turn++;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <timer_7_segments_counter_run+0x4c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <timer_7_segments_counter_run+0x4c>)
 8000a10:	6013      	str	r3, [r2, #0]
				if(_7_segments_turn==3) _7_segments_turn=1;
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <timer_7_segments_counter_run+0x4c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b03      	cmp	r3, #3
 8000a18:	d102      	bne.n	8000a20 <timer_7_segments_counter_run+0x3c>
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <timer_7_segments_counter_run+0x4c>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	601a      	str	r2, [r3, #0]
			}
	}

}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	20000094 	.word	0x20000094
 8000a2c:	20000098 	.word	0x20000098
 8000a30:	20000000 	.word	0x20000000

08000a34 <fsm_12_leds>:
#include "main.h"
#include "global.h"

int status_12_leds;

void fsm_12_leds(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	switch(status_12_leds) {
 8000a38:	4bb1      	ldr	r3, [pc, #708]	; (8000d00 <fsm_12_leds+0x2cc>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	2b03      	cmp	r3, #3
 8000a40:	f200 82b1 	bhi.w	8000fa6 <fsm_12_leds+0x572>
 8000a44:	a201      	add	r2, pc, #4	; (adr r2, 8000a4c <fsm_12_leds+0x18>)
 8000a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4a:	bf00      	nop
 8000a4c:	08000a5d 	.word	0x08000a5d
 8000a50:	08000dab 	.word	0x08000dab
 8000a54:	08000e55 	.word	0x08000e55
 8000a58:	08000eff 	.word	0x08000eff
		case SHOWING:
			  if(_7_segments_flag==1)
 8000a5c:	4ba9      	ldr	r3, [pc, #676]	; (8000d04 <fsm_12_leds+0x2d0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d13d      	bne.n	8000ae0 <fsm_12_leds+0xac>
			  {
				  if(_7_segments_turn==1)
 8000a64:	4ba8      	ldr	r3, [pc, #672]	; (8000d08 <fsm_12_leds+0x2d4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d11b      	bne.n	8000aa4 <fsm_12_leds+0x70>
				  {
					  convert_num_to_display7(current_road2_time);
 8000a6c:	4ba7      	ldr	r3, [pc, #668]	; (8000d0c <fsm_12_leds+0x2d8>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff6d 	bl	8000950 <convert_num_to_display7>
					  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2102      	movs	r1, #2
 8000a7a:	48a5      	ldr	r0, [pc, #660]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000a7c:	f001 fbf3 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2104      	movs	r1, #4
 8000a84:	48a2      	ldr	r0, [pc, #648]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000a86:	f001 fbee 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a90:	489f      	ldr	r0, [pc, #636]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000a92:	f001 fbe8 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000a96:	2201      	movs	r2, #1
 8000a98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a9c:	489c      	ldr	r0, [pc, #624]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000a9e:	f001 fbe2 	bl	8002266 <HAL_GPIO_WritePin>
 8000aa2:	e01a      	b.n	8000ada <fsm_12_leds+0xa6>
				  }
				  else
				  {
					  convert_num_to_display7(current_road1_time);
 8000aa4:	4b9b      	ldr	r3, [pc, #620]	; (8000d14 <fsm_12_leds+0x2e0>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff51 	bl	8000950 <convert_num_to_display7>
					  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	4897      	ldr	r0, [pc, #604]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000ab4:	f001 fbd7 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2104      	movs	r1, #4
 8000abc:	4894      	ldr	r0, [pc, #592]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000abe:	f001 fbd2 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac8:	4891      	ldr	r0, [pc, #580]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000aca:	f001 fbcc 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad4:	488e      	ldr	r0, [pc, #568]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000ad6:	f001 fbc6 	bl	8002266 <HAL_GPIO_WritePin>
				  }
				  setTimer_7_segments_counter(250);
 8000ada:	20fa      	movs	r0, #250	; 0xfa
 8000adc:	f7ff ff68 	bl	80009b0 <setTimer_7_segments_counter>
			  }
			  if(_12_leds_flag==1)
 8000ae0:	4b8d      	ldr	r3, [pc, #564]	; (8000d18 <fsm_12_leds+0x2e4>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	f040 8260 	bne.w	8000faa <fsm_12_leds+0x576>
			  {
				  if(current_led_road1==0)
 8000aea:	4b8c      	ldr	r3, [pc, #560]	; (8000d1c <fsm_12_leds+0x2e8>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d12e      	bne.n	8000b50 <fsm_12_leds+0x11c>
				  {
					  HAL_GPIO_WritePin(red_road1_GPIO_Port, red_road1_Pin, 1);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2120      	movs	r1, #32
 8000af6:	4886      	ldr	r0, [pc, #536]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000af8:	f001 fbb5 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(green_road1_GPIO_Port, green_road1_Pin, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2140      	movs	r1, #64	; 0x40
 8000b00:	4883      	ldr	r0, [pc, #524]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000b02:	f001 fbb0 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(yellow_road1_GPIO_Port, yellow_road1_Pin, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2180      	movs	r1, #128	; 0x80
 8000b0a:	4881      	ldr	r0, [pc, #516]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000b0c:	f001 fbab 	bl	8002266 <HAL_GPIO_WritePin>
					  current_road1_time--;
 8000b10:	4b80      	ldr	r3, [pc, #512]	; (8000d14 <fsm_12_leds+0x2e0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	4a7f      	ldr	r2, [pc, #508]	; (8000d14 <fsm_12_leds+0x2e0>)
 8000b18:	6013      	str	r3, [r2, #0]
					  if(current_road1_time==0)
 8000b1a:	4b7e      	ldr	r3, [pc, #504]	; (8000d14 <fsm_12_leds+0x2e0>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d17b      	bne.n	8000c1a <fsm_12_leds+0x1e6>
					  {
						  HAL_GPIO_WritePin(red_road1_GPIO_Port, red_road1_Pin, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2120      	movs	r1, #32
 8000b26:	487a      	ldr	r0, [pc, #488]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000b28:	f001 fb9d 	bl	8002266 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(green_road1_GPIO_Port, green_road1_Pin, 1);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2140      	movs	r1, #64	; 0x40
 8000b30:	4877      	ldr	r0, [pc, #476]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000b32:	f001 fb98 	bl	8002266 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(yellow_road1_GPIO_Port, yellow_road1_Pin, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2180      	movs	r1, #128	; 0x80
 8000b3a:	4875      	ldr	r0, [pc, #468]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000b3c:	f001 fb93 	bl	8002266 <HAL_GPIO_WritePin>
						  current_led_road1=1;
 8000b40:	4b76      	ldr	r3, [pc, #472]	; (8000d1c <fsm_12_leds+0x2e8>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	601a      	str	r2, [r3, #0]
						  current_road1_time=green_time;
 8000b46:	4b76      	ldr	r3, [pc, #472]	; (8000d20 <fsm_12_leds+0x2ec>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a72      	ldr	r2, [pc, #456]	; (8000d14 <fsm_12_leds+0x2e0>)
 8000b4c:	6013      	str	r3, [r2, #0]
 8000b4e:	e064      	b.n	8000c1a <fsm_12_leds+0x1e6>
					  }
				  }
				  else if(current_led_road1==1)
 8000b50:	4b72      	ldr	r3, [pc, #456]	; (8000d1c <fsm_12_leds+0x2e8>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d12e      	bne.n	8000bb6 <fsm_12_leds+0x182>
				  {
					  HAL_GPIO_WritePin(red_road1_GPIO_Port, red_road1_Pin, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2120      	movs	r1, #32
 8000b5c:	486c      	ldr	r0, [pc, #432]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000b5e:	f001 fb82 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(green_road1_GPIO_Port, green_road1_Pin, 1);
 8000b62:	2201      	movs	r2, #1
 8000b64:	2140      	movs	r1, #64	; 0x40
 8000b66:	486a      	ldr	r0, [pc, #424]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000b68:	f001 fb7d 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(yellow_road1_GPIO_Port, yellow_road1_Pin, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2180      	movs	r1, #128	; 0x80
 8000b70:	4867      	ldr	r0, [pc, #412]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000b72:	f001 fb78 	bl	8002266 <HAL_GPIO_WritePin>
					  current_road1_time--;
 8000b76:	4b67      	ldr	r3, [pc, #412]	; (8000d14 <fsm_12_leds+0x2e0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	4a65      	ldr	r2, [pc, #404]	; (8000d14 <fsm_12_leds+0x2e0>)
 8000b7e:	6013      	str	r3, [r2, #0]
					  if(current_road1_time==0)
 8000b80:	4b64      	ldr	r3, [pc, #400]	; (8000d14 <fsm_12_leds+0x2e0>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d148      	bne.n	8000c1a <fsm_12_leds+0x1e6>
					  {
						  HAL_GPIO_WritePin(red_road1_GPIO_Port, red_road1_Pin, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2120      	movs	r1, #32
 8000b8c:	4860      	ldr	r0, [pc, #384]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000b8e:	f001 fb6a 	bl	8002266 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(green_road1_GPIO_Port, green_road1_Pin, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2140      	movs	r1, #64	; 0x40
 8000b96:	485e      	ldr	r0, [pc, #376]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000b98:	f001 fb65 	bl	8002266 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(yellow_road1_GPIO_Port, yellow_road1_Pin, 1);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2180      	movs	r1, #128	; 0x80
 8000ba0:	485b      	ldr	r0, [pc, #364]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000ba2:	f001 fb60 	bl	8002266 <HAL_GPIO_WritePin>
						  current_led_road1=2;
 8000ba6:	4b5d      	ldr	r3, [pc, #372]	; (8000d1c <fsm_12_leds+0x2e8>)
 8000ba8:	2202      	movs	r2, #2
 8000baa:	601a      	str	r2, [r3, #0]
						  current_road1_time=yellow_time;
 8000bac:	4b5d      	ldr	r3, [pc, #372]	; (8000d24 <fsm_12_leds+0x2f0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a58      	ldr	r2, [pc, #352]	; (8000d14 <fsm_12_leds+0x2e0>)
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	e031      	b.n	8000c1a <fsm_12_leds+0x1e6>
					  }
				  }
				  else if(current_led_road1==2)
 8000bb6:	4b59      	ldr	r3, [pc, #356]	; (8000d1c <fsm_12_leds+0x2e8>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d12d      	bne.n	8000c1a <fsm_12_leds+0x1e6>
				  {
					  HAL_GPIO_WritePin(red_road1_GPIO_Port, red_road1_Pin, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2120      	movs	r1, #32
 8000bc2:	4853      	ldr	r0, [pc, #332]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000bc4:	f001 fb4f 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(green_road1_GPIO_Port, green_road1_Pin, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2140      	movs	r1, #64	; 0x40
 8000bcc:	4850      	ldr	r0, [pc, #320]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000bce:	f001 fb4a 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(yellow_road1_GPIO_Port, yellow_road1_Pin, 1);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	484e      	ldr	r0, [pc, #312]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000bd8:	f001 fb45 	bl	8002266 <HAL_GPIO_WritePin>
					  current_road1_time--;
 8000bdc:	4b4d      	ldr	r3, [pc, #308]	; (8000d14 <fsm_12_leds+0x2e0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	4a4c      	ldr	r2, [pc, #304]	; (8000d14 <fsm_12_leds+0x2e0>)
 8000be4:	6013      	str	r3, [r2, #0]
					  if(current_road1_time==0)
 8000be6:	4b4b      	ldr	r3, [pc, #300]	; (8000d14 <fsm_12_leds+0x2e0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d115      	bne.n	8000c1a <fsm_12_leds+0x1e6>
					  {
						  HAL_GPIO_WritePin(red_road1_GPIO_Port, red_road1_Pin, 1);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2120      	movs	r1, #32
 8000bf2:	4847      	ldr	r0, [pc, #284]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000bf4:	f001 fb37 	bl	8002266 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(green_road1_GPIO_Port, green_road1_Pin, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2140      	movs	r1, #64	; 0x40
 8000bfc:	4844      	ldr	r0, [pc, #272]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000bfe:	f001 fb32 	bl	8002266 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(yellow_road1_GPIO_Port, yellow_road1_Pin, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2180      	movs	r1, #128	; 0x80
 8000c06:	4842      	ldr	r0, [pc, #264]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000c08:	f001 fb2d 	bl	8002266 <HAL_GPIO_WritePin>
						  current_led_road1=0;
 8000c0c:	4b43      	ldr	r3, [pc, #268]	; (8000d1c <fsm_12_leds+0x2e8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
						  current_road1_time=red_time;
 8000c12:	4b45      	ldr	r3, [pc, #276]	; (8000d28 <fsm_12_leds+0x2f4>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a3f      	ldr	r2, [pc, #252]	; (8000d14 <fsm_12_leds+0x2e0>)
 8000c18:	6013      	str	r3, [r2, #0]
					  }
				  }
				  if(current_led_road2==0)
 8000c1a:	4b44      	ldr	r3, [pc, #272]	; (8000d2c <fsm_12_leds+0x2f8>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d135      	bne.n	8000c8e <fsm_12_leds+0x25a>
				  {
					  HAL_GPIO_WritePin(red_road2_GPIO_Port, red_road2_Pin, 1);
 8000c22:	2201      	movs	r2, #1
 8000c24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c28:	4839      	ldr	r0, [pc, #228]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000c2a:	f001 fb1c 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(green_road2_GPIO_Port, green_road2_Pin, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c34:	4836      	ldr	r0, [pc, #216]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000c36:	f001 fb16 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(yellow_road2_GPIO_Port, yellow_road2_Pin, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c40:	4833      	ldr	r0, [pc, #204]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000c42:	f001 fb10 	bl	8002266 <HAL_GPIO_WritePin>
					  current_road2_time--;
 8000c46:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <fsm_12_leds+0x2d8>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	4a2f      	ldr	r2, [pc, #188]	; (8000d0c <fsm_12_leds+0x2d8>)
 8000c4e:	6013      	str	r3, [r2, #0]
					  if(current_road2_time==0)
 8000c50:	4b2e      	ldr	r3, [pc, #184]	; (8000d0c <fsm_12_leds+0x2d8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f040 80a3 	bne.w	8000da0 <fsm_12_leds+0x36c>
					  {
						  HAL_GPIO_WritePin(red_road2_GPIO_Port, red_road2_Pin, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c60:	482b      	ldr	r0, [pc, #172]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000c62:	f001 fb00 	bl	8002266 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(green_road2_GPIO_Port, green_road2_Pin, 1);
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c6c:	4828      	ldr	r0, [pc, #160]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000c6e:	f001 fafa 	bl	8002266 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(yellow_road2_GPIO_Port, yellow_road2_Pin, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c78:	4825      	ldr	r0, [pc, #148]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000c7a:	f001 faf4 	bl	8002266 <HAL_GPIO_WritePin>
						  current_led_road2=1;
 8000c7e:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <fsm_12_leds+0x2f8>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	601a      	str	r2, [r3, #0]
						  current_road2_time=green_time;
 8000c84:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <fsm_12_leds+0x2ec>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a20      	ldr	r2, [pc, #128]	; (8000d0c <fsm_12_leds+0x2d8>)
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	e088      	b.n	8000da0 <fsm_12_leds+0x36c>
					  }
				  }
				  else if(current_led_road2==1)
 8000c8e:	4b27      	ldr	r3, [pc, #156]	; (8000d2c <fsm_12_leds+0x2f8>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d14c      	bne.n	8000d30 <fsm_12_leds+0x2fc>
				  {
					  HAL_GPIO_WritePin(red_road2_GPIO_Port, red_road2_Pin, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9c:	481c      	ldr	r0, [pc, #112]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000c9e:	f001 fae2 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(green_road2_GPIO_Port, green_road2_Pin, 1);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca8:	4819      	ldr	r0, [pc, #100]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000caa:	f001 fadc 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(yellow_road2_GPIO_Port, yellow_road2_Pin, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb4:	4816      	ldr	r0, [pc, #88]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000cb6:	f001 fad6 	bl	8002266 <HAL_GPIO_WritePin>
					  current_road2_time--;
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <fsm_12_leds+0x2d8>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <fsm_12_leds+0x2d8>)
 8000cc2:	6013      	str	r3, [r2, #0]
					  if(current_road2_time==0)
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <fsm_12_leds+0x2d8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d169      	bne.n	8000da0 <fsm_12_leds+0x36c>
					  {
						  HAL_GPIO_WritePin(red_road2_GPIO_Port, red_road2_Pin, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd2:	480f      	ldr	r0, [pc, #60]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000cd4:	f001 fac7 	bl	8002266 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(green_road2_GPIO_Port, green_road2_Pin, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cde:	480c      	ldr	r0, [pc, #48]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000ce0:	f001 fac1 	bl	8002266 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(yellow_road2_GPIO_Port, yellow_road2_Pin, 1);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cea:	4809      	ldr	r0, [pc, #36]	; (8000d10 <fsm_12_leds+0x2dc>)
 8000cec:	f001 fabb 	bl	8002266 <HAL_GPIO_WritePin>
						  current_led_road2=2;
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <fsm_12_leds+0x2f8>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	601a      	str	r2, [r3, #0]
						  current_road2_time=yellow_time;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <fsm_12_leds+0x2f0>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <fsm_12_leds+0x2d8>)
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	e04f      	b.n	8000da0 <fsm_12_leds+0x36c>
 8000d00:	200000d0 	.word	0x200000d0
 8000d04:	20000098 	.word	0x20000098
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000014 	.word	0x20000014
 8000d10:	40010800 	.word	0x40010800
 8000d14:	20000010 	.word	0x20000010
 8000d18:	200000c8 	.word	0x200000c8
 8000d1c:	2000009c 	.word	0x2000009c
 8000d20:	20000008 	.word	0x20000008
 8000d24:	2000000c 	.word	0x2000000c
 8000d28:	20000004 	.word	0x20000004
 8000d2c:	20000018 	.word	0x20000018
					  }
				  }
				  else if(current_led_road2==2)
 8000d30:	4ba2      	ldr	r3, [pc, #648]	; (8000fbc <fsm_12_leds+0x588>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d133      	bne.n	8000da0 <fsm_12_leds+0x36c>
				  {
					  HAL_GPIO_WritePin(red_road2_GPIO_Port, red_road2_Pin, 0);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d3e:	48a0      	ldr	r0, [pc, #640]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000d40:	f001 fa91 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(green_road2_GPIO_Port, green_road2_Pin, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d4a:	489d      	ldr	r0, [pc, #628]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000d4c:	f001 fa8b 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(yellow_road2_GPIO_Port, yellow_road2_Pin, 1);
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d56:	489a      	ldr	r0, [pc, #616]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000d58:	f001 fa85 	bl	8002266 <HAL_GPIO_WritePin>
					  current_road2_time--;
 8000d5c:	4b99      	ldr	r3, [pc, #612]	; (8000fc4 <fsm_12_leds+0x590>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3b01      	subs	r3, #1
 8000d62:	4a98      	ldr	r2, [pc, #608]	; (8000fc4 <fsm_12_leds+0x590>)
 8000d64:	6013      	str	r3, [r2, #0]
					  if(current_road2_time==0)
 8000d66:	4b97      	ldr	r3, [pc, #604]	; (8000fc4 <fsm_12_leds+0x590>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d118      	bne.n	8000da0 <fsm_12_leds+0x36c>
					  {
						  HAL_GPIO_WritePin(red_road2_GPIO_Port, red_road2_Pin, 1);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d74:	4892      	ldr	r0, [pc, #584]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000d76:	f001 fa76 	bl	8002266 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(green_road2_GPIO_Port, green_road2_Pin, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d80:	488f      	ldr	r0, [pc, #572]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000d82:	f001 fa70 	bl	8002266 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(yellow_road2_GPIO_Port, yellow_road2_Pin, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d8c:	488c      	ldr	r0, [pc, #560]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000d8e:	f001 fa6a 	bl	8002266 <HAL_GPIO_WritePin>
						  current_led_road2=0;
 8000d92:	4b8a      	ldr	r3, [pc, #552]	; (8000fbc <fsm_12_leds+0x588>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
						  current_road2_time=red_time;
 8000d98:	4b8b      	ldr	r3, [pc, #556]	; (8000fc8 <fsm_12_leds+0x594>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a89      	ldr	r2, [pc, #548]	; (8000fc4 <fsm_12_leds+0x590>)
 8000d9e:	6013      	str	r3, [r2, #0]
					  }
				  }
				  setTimer_12_leds(1000);
 8000da0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000da4:	f7ff fb86 	bl	80004b4 <setTimer_12_leds>
			  }
			break;
 8000da8:	e0ff      	b.n	8000faa <fsm_12_leds+0x576>
		case MODE_RED:
			if(led_blinking_2Hz_flag == 1)
 8000daa:	4b88      	ldr	r3, [pc, #544]	; (8000fcc <fsm_12_leds+0x598>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d10c      	bne.n	8000dcc <fsm_12_leds+0x398>
			{
				HAL_GPIO_TogglePin(red_road1_GPIO_Port, red_road1_Pin);
 8000db2:	2120      	movs	r1, #32
 8000db4:	4882      	ldr	r0, [pc, #520]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000db6:	f001 fa6e 	bl	8002296 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(red_road2_GPIO_Port, red_road2_Pin);
 8000dba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dbe:	4880      	ldr	r0, [pc, #512]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000dc0:	f001 fa69 	bl	8002296 <HAL_GPIO_TogglePin>
				setTimer_led_blinking_2Hz(500);
 8000dc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc8:	f000 fc76 	bl	80016b8 <setTimer_led_blinking_2Hz>
			}

			  if(_7_segments_flag==1)
 8000dcc:	4b80      	ldr	r3, [pc, #512]	; (8000fd0 <fsm_12_leds+0x59c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	f040 80ec 	bne.w	8000fae <fsm_12_leds+0x57a>
			  {
				  if(_7_segments_turn==1)
 8000dd6:	4b7f      	ldr	r3, [pc, #508]	; (8000fd4 <fsm_12_leds+0x5a0>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d11b      	bne.n	8000e16 <fsm_12_leds+0x3e2>
				  {
					  convert_num_to_display7(current_mode);
 8000dde:	4b7e      	ldr	r3, [pc, #504]	; (8000fd8 <fsm_12_leds+0x5a4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fdb4 	bl	8000950 <convert_num_to_display7>
					  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2102      	movs	r1, #2
 8000dec:	4874      	ldr	r0, [pc, #464]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000dee:	f001 fa3a 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2104      	movs	r1, #4
 8000df6:	4872      	ldr	r0, [pc, #456]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000df8:	f001 fa35 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e02:	486f      	ldr	r0, [pc, #444]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000e04:	f001 fa2f 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e0e:	486c      	ldr	r0, [pc, #432]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000e10:	f001 fa29 	bl	8002266 <HAL_GPIO_WritePin>
 8000e14:	e01a      	b.n	8000e4c <fsm_12_leds+0x418>
				  }
				  else
				  {
					  convert_num_to_display7(red_buffer);
 8000e16:	4b71      	ldr	r3, [pc, #452]	; (8000fdc <fsm_12_leds+0x5a8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fd98 	bl	8000950 <convert_num_to_display7>
					  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000e20:	2201      	movs	r2, #1
 8000e22:	2102      	movs	r1, #2
 8000e24:	4866      	ldr	r0, [pc, #408]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000e26:	f001 fa1e 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2104      	movs	r1, #4
 8000e2e:	4864      	ldr	r0, [pc, #400]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000e30:	f001 fa19 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e3a:	4861      	ldr	r0, [pc, #388]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000e3c:	f001 fa13 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e46:	485e      	ldr	r0, [pc, #376]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000e48:	f001 fa0d 	bl	8002266 <HAL_GPIO_WritePin>
				  }
				  setTimer_7_segments_counter(250);
 8000e4c:	20fa      	movs	r0, #250	; 0xfa
 8000e4e:	f7ff fdaf 	bl	80009b0 <setTimer_7_segments_counter>
			  }
			break;
 8000e52:	e0ac      	b.n	8000fae <fsm_12_leds+0x57a>
		case MODE_GREEN:
			if(led_blinking_2Hz_flag == 1)
 8000e54:	4b5d      	ldr	r3, [pc, #372]	; (8000fcc <fsm_12_leds+0x598>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d10c      	bne.n	8000e76 <fsm_12_leds+0x442>
			{
				HAL_GPIO_TogglePin(green_road1_GPIO_Port, green_road1_Pin);
 8000e5c:	2140      	movs	r1, #64	; 0x40
 8000e5e:	4858      	ldr	r0, [pc, #352]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000e60:	f001 fa19 	bl	8002296 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(green_road2_GPIO_Port, green_road2_Pin);
 8000e64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e68:	4855      	ldr	r0, [pc, #340]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000e6a:	f001 fa14 	bl	8002296 <HAL_GPIO_TogglePin>
				setTimer_led_blinking_2Hz(500);
 8000e6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e72:	f000 fc21 	bl	80016b8 <setTimer_led_blinking_2Hz>
			}


			  if(_7_segments_flag==1)
 8000e76:	4b56      	ldr	r3, [pc, #344]	; (8000fd0 <fsm_12_leds+0x59c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	f040 8099 	bne.w	8000fb2 <fsm_12_leds+0x57e>
			  {
				  if(_7_segments_turn==1)
 8000e80:	4b54      	ldr	r3, [pc, #336]	; (8000fd4 <fsm_12_leds+0x5a0>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d11b      	bne.n	8000ec0 <fsm_12_leds+0x48c>
				  {
					  convert_num_to_display7(current_mode);
 8000e88:	4b53      	ldr	r3, [pc, #332]	; (8000fd8 <fsm_12_leds+0x5a4>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fd5f 	bl	8000950 <convert_num_to_display7>
					  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2102      	movs	r1, #2
 8000e96:	484a      	ldr	r0, [pc, #296]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000e98:	f001 f9e5 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2104      	movs	r1, #4
 8000ea0:	4847      	ldr	r0, [pc, #284]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000ea2:	f001 f9e0 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eac:	4844      	ldr	r0, [pc, #272]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000eae:	f001 f9da 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb8:	4841      	ldr	r0, [pc, #260]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000eba:	f001 f9d4 	bl	8002266 <HAL_GPIO_WritePin>
 8000ebe:	e01a      	b.n	8000ef6 <fsm_12_leds+0x4c2>
				  }
				  else
				  {
					  convert_num_to_display7(green_buffer);
 8000ec0:	4b47      	ldr	r3, [pc, #284]	; (8000fe0 <fsm_12_leds+0x5ac>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fd43 	bl	8000950 <convert_num_to_display7>
					  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	2102      	movs	r1, #2
 8000ece:	483c      	ldr	r0, [pc, #240]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000ed0:	f001 f9c9 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	4839      	ldr	r0, [pc, #228]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000eda:	f001 f9c4 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ee4:	4836      	ldr	r0, [pc, #216]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000ee6:	f001 f9be 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef0:	4833      	ldr	r0, [pc, #204]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000ef2:	f001 f9b8 	bl	8002266 <HAL_GPIO_WritePin>
				  }
				  setTimer_7_segments_counter(250);
 8000ef6:	20fa      	movs	r0, #250	; 0xfa
 8000ef8:	f7ff fd5a 	bl	80009b0 <setTimer_7_segments_counter>
			  }
			break;
 8000efc:	e059      	b.n	8000fb2 <fsm_12_leds+0x57e>
		case MODE_YELLOW:
			if(led_blinking_2Hz_flag == 1)
 8000efe:	4b33      	ldr	r3, [pc, #204]	; (8000fcc <fsm_12_leds+0x598>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d10c      	bne.n	8000f20 <fsm_12_leds+0x4ec>
			{
				HAL_GPIO_TogglePin(yellow_road1_GPIO_Port, yellow_road1_Pin);
 8000f06:	2180      	movs	r1, #128	; 0x80
 8000f08:	482d      	ldr	r0, [pc, #180]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000f0a:	f001 f9c4 	bl	8002296 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(yellow_road2_GPIO_Port, yellow_road2_Pin);
 8000f0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f12:	482b      	ldr	r0, [pc, #172]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000f14:	f001 f9bf 	bl	8002296 <HAL_GPIO_TogglePin>
				setTimer_led_blinking_2Hz(500);
 8000f18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f1c:	f000 fbcc 	bl	80016b8 <setTimer_led_blinking_2Hz>
			}
			  if(_7_segments_flag==1)
 8000f20:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <fsm_12_leds+0x59c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d146      	bne.n	8000fb6 <fsm_12_leds+0x582>
			  {
				  if(_7_segments_turn==1)
 8000f28:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <fsm_12_leds+0x5a0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d11b      	bne.n	8000f68 <fsm_12_leds+0x534>
				  {
					  convert_num_to_display7(current_mode);
 8000f30:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <fsm_12_leds+0x5a4>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fd0b 	bl	8000950 <convert_num_to_display7>
					  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	4820      	ldr	r0, [pc, #128]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000f40:	f001 f991 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2104      	movs	r1, #4
 8000f48:	481d      	ldr	r0, [pc, #116]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000f4a:	f001 f98c 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f54:	481a      	ldr	r0, [pc, #104]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000f56:	f001 f986 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f60:	4817      	ldr	r0, [pc, #92]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000f62:	f001 f980 	bl	8002266 <HAL_GPIO_WritePin>
 8000f66:	e01a      	b.n	8000f9e <fsm_12_leds+0x56a>
				  }
				  else
				  {
					  convert_num_to_display7(yellow_buffer);
 8000f68:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <fsm_12_leds+0x5b0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fcef 	bl	8000950 <convert_num_to_display7>
					  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2102      	movs	r1, #2
 8000f76:	4812      	ldr	r0, [pc, #72]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000f78:	f001 f975 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2104      	movs	r1, #4
 8000f80:	480f      	ldr	r0, [pc, #60]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000f82:	f001 f970 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000f8e:	f001 f96a 	bl	8002266 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f98:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <fsm_12_leds+0x58c>)
 8000f9a:	f001 f964 	bl	8002266 <HAL_GPIO_WritePin>
				  }
				  setTimer_7_segments_counter(250);
 8000f9e:	20fa      	movs	r0, #250	; 0xfa
 8000fa0:	f7ff fd06 	bl	80009b0 <setTimer_7_segments_counter>
			  }
			break;
 8000fa4:	e007      	b.n	8000fb6 <fsm_12_leds+0x582>
		default:
			break;
 8000fa6:	bf00      	nop
 8000fa8:	e006      	b.n	8000fb8 <fsm_12_leds+0x584>
			break;
 8000faa:	bf00      	nop
 8000fac:	e004      	b.n	8000fb8 <fsm_12_leds+0x584>
			break;
 8000fae:	bf00      	nop
 8000fb0:	e002      	b.n	8000fb8 <fsm_12_leds+0x584>
			break;
 8000fb2:	bf00      	nop
 8000fb4:	e000      	b.n	8000fb8 <fsm_12_leds+0x584>
			break;
 8000fb6:	bf00      	nop
	}
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000018 	.word	0x20000018
 8000fc0:	40010800 	.word	0x40010800
 8000fc4:	20000014 	.word	0x20000014
 8000fc8:	20000004 	.word	0x20000004
 8000fcc:	200000c0 	.word	0x200000c0
 8000fd0:	20000098 	.word	0x20000098
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	2000001c 	.word	0x2000001c
 8000fdc:	20000020 	.word	0x20000020
 8000fe0:	20000024 	.word	0x20000024
 8000fe4:	20000028 	.word	0x20000028

08000fe8 <setINIT_SHOWING>:
long long int prescaler_htim2 ;
long long int periodCounter_htim2 ;
long long int totalHz = 8000000;
int time_interupt_duration;

void setINIT_SHOWING(void){
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
	current_led_road1 = 0;
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <setINIT_SHOWING+0x28>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
	current_led_road2 = 1;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <setINIT_SHOWING+0x2c>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]
	current_road1_time = red_time;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <setINIT_SHOWING+0x30>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a07      	ldr	r2, [pc, #28]	; (800101c <setINIT_SHOWING+0x34>)
 8000ffe:	6013      	str	r3, [r2, #0]
	current_road2_time = green_time;
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <setINIT_SHOWING+0x38>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a07      	ldr	r2, [pc, #28]	; (8001024 <setINIT_SHOWING+0x3c>)
 8001006:	6013      	str	r3, [r2, #0]
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	2000009c 	.word	0x2000009c
 8001014:	20000018 	.word	0x20000018
 8001018:	20000004 	.word	0x20000004
 800101c:	20000010 	.word	0x20000010
 8001020:	20000008 	.word	0x20000008
 8001024:	20000014 	.word	0x20000014

08001028 <fsm_for_button0>:
#include "input_processing.h"

enum ButtonState button0 = BUTTON_RELEASED;
enum ButtonState button1 = BUTTON_RELEASED;
enum ButtonState button2 = BUTTON_RELEASED;
void fsm_for_button0 (void ) {
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
switch ( button0 ){
 800102c:	4b6b      	ldr	r3, [pc, #428]	; (80011dc <fsm_for_button0+0x1b4>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d002      	beq.n	800103a <fsm_for_button0+0x12>
 8001034:	2b01      	cmp	r3, #1
 8001036:	d00a      	beq.n	800104e <fsm_for_button0+0x26>
		}
		if (! (is_button0_pressed () == 1)  ) {
			button0 = BUTTON_RELEASED ;
		}
		 break ;
		default: break;
 8001038:	e0cd      	b.n	80011d6 <fsm_for_button0+0x1ae>
		if( is_button0_pressed () == 1 ) {
 800103a:	f000 f9d5 	bl	80013e8 <is_button0_pressed>
 800103e:	4603      	mov	r3, r0
 8001040:	2b01      	cmp	r3, #1
 8001042:	f040 80c5 	bne.w	80011d0 <fsm_for_button0+0x1a8>
			button0 = BUTTON_PRESSED ;
 8001046:	4b65      	ldr	r3, [pc, #404]	; (80011dc <fsm_for_button0+0x1b4>)
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
		 break ;
 800104c:	e0c0      	b.n	80011d0 <fsm_for_button0+0x1a8>
		switch(status_12_leds){
 800104e:	4b64      	ldr	r3, [pc, #400]	; (80011e0 <fsm_for_button0+0x1b8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	3b01      	subs	r3, #1
 8001054:	2b03      	cmp	r3, #3
 8001056:	f200 80b1 	bhi.w	80011bc <fsm_for_button0+0x194>
 800105a:	a201      	add	r2, pc, #4	; (adr r2, 8001060 <fsm_for_button0+0x38>)
 800105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001060:	08001071 	.word	0x08001071
 8001064:	080010c5 	.word	0x080010c5
 8001068:	08001119 	.word	0x08001119
 800106c:	08001169 	.word	0x08001169
			 status_12_leds= MODE_RED;
 8001070:	4b5b      	ldr	r3, [pc, #364]	; (80011e0 <fsm_for_button0+0x1b8>)
 8001072:	2202      	movs	r2, #2
 8001074:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(red_road1_GPIO_Port, red_road1_Pin, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2120      	movs	r1, #32
 800107a:	485a      	ldr	r0, [pc, #360]	; (80011e4 <fsm_for_button0+0x1bc>)
 800107c:	f001 f8f3 	bl	8002266 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red_road2_GPIO_Port, red_road2_Pin, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001086:	4857      	ldr	r0, [pc, #348]	; (80011e4 <fsm_for_button0+0x1bc>)
 8001088:	f001 f8ed 	bl	8002266 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green_road1_GPIO_Port, green_road1_Pin, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2140      	movs	r1, #64	; 0x40
 8001090:	4854      	ldr	r0, [pc, #336]	; (80011e4 <fsm_for_button0+0x1bc>)
 8001092:	f001 f8e8 	bl	8002266 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green_road2_GPIO_Port, green_road2_Pin, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 7100 	mov.w	r1, #512	; 0x200
 800109c:	4851      	ldr	r0, [pc, #324]	; (80011e4 <fsm_for_button0+0x1bc>)
 800109e:	f001 f8e2 	bl	8002266 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow_road1_GPIO_Port, yellow_road1_Pin, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	484f      	ldr	r0, [pc, #316]	; (80011e4 <fsm_for_button0+0x1bc>)
 80010a8:	f001 f8dd 	bl	8002266 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow_road2_GPIO_Port, yellow_road2_Pin, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b2:	484c      	ldr	r0, [pc, #304]	; (80011e4 <fsm_for_button0+0x1bc>)
 80010b4:	f001 f8d7 	bl	8002266 <HAL_GPIO_WritePin>
			current_mode++;
 80010b8:	4b4b      	ldr	r3, [pc, #300]	; (80011e8 <fsm_for_button0+0x1c0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	4a4a      	ldr	r2, [pc, #296]	; (80011e8 <fsm_for_button0+0x1c0>)
 80010c0:	6013      	str	r3, [r2, #0]
			break;
 80010c2:	e07c      	b.n	80011be <fsm_for_button0+0x196>
			  status_12_leds= MODE_YELLOW;
 80010c4:	4b46      	ldr	r3, [pc, #280]	; (80011e0 <fsm_for_button0+0x1b8>)
 80010c6:	2204      	movs	r2, #4
 80010c8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(red_road1_GPIO_Port, red_road1_Pin, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2120      	movs	r1, #32
 80010ce:	4845      	ldr	r0, [pc, #276]	; (80011e4 <fsm_for_button0+0x1bc>)
 80010d0:	f001 f8c9 	bl	8002266 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(red_road2_GPIO_Port, red_road2_Pin, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010da:	4842      	ldr	r0, [pc, #264]	; (80011e4 <fsm_for_button0+0x1bc>)
 80010dc:	f001 f8c3 	bl	8002266 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(green_road1_GPIO_Port, green_road1_Pin, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2140      	movs	r1, #64	; 0x40
 80010e4:	483f      	ldr	r0, [pc, #252]	; (80011e4 <fsm_for_button0+0x1bc>)
 80010e6:	f001 f8be 	bl	8002266 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(green_road2_GPIO_Port, green_road2_Pin, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f0:	483c      	ldr	r0, [pc, #240]	; (80011e4 <fsm_for_button0+0x1bc>)
 80010f2:	f001 f8b8 	bl	8002266 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yellow_road1_GPIO_Port, yellow_road1_Pin, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2180      	movs	r1, #128	; 0x80
 80010fa:	483a      	ldr	r0, [pc, #232]	; (80011e4 <fsm_for_button0+0x1bc>)
 80010fc:	f001 f8b3 	bl	8002266 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yellow_road2_GPIO_Port, yellow_road2_Pin, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001106:	4837      	ldr	r0, [pc, #220]	; (80011e4 <fsm_for_button0+0x1bc>)
 8001108:	f001 f8ad 	bl	8002266 <HAL_GPIO_WritePin>
				current_mode++;
 800110c:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <fsm_for_button0+0x1c0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	4a35      	ldr	r2, [pc, #212]	; (80011e8 <fsm_for_button0+0x1c0>)
 8001114:	6013      	str	r3, [r2, #0]
			break;
 8001116:	e052      	b.n	80011be <fsm_for_button0+0x196>
			  status_12_leds= MODE_RED;
 8001118:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <fsm_for_button0+0x1b8>)
 800111a:	2202      	movs	r2, #2
 800111c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(red_road1_GPIO_Port, red_road1_Pin, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2120      	movs	r1, #32
 8001122:	4830      	ldr	r0, [pc, #192]	; (80011e4 <fsm_for_button0+0x1bc>)
 8001124:	f001 f89f 	bl	8002266 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(red_road2_GPIO_Port, red_road2_Pin, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800112e:	482d      	ldr	r0, [pc, #180]	; (80011e4 <fsm_for_button0+0x1bc>)
 8001130:	f001 f899 	bl	8002266 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(green_road1_GPIO_Port, green_road1_Pin, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2140      	movs	r1, #64	; 0x40
 8001138:	482a      	ldr	r0, [pc, #168]	; (80011e4 <fsm_for_button0+0x1bc>)
 800113a:	f001 f894 	bl	8002266 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(green_road2_GPIO_Port, green_road2_Pin, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001144:	4827      	ldr	r0, [pc, #156]	; (80011e4 <fsm_for_button0+0x1bc>)
 8001146:	f001 f88e 	bl	8002266 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yellow_road1_GPIO_Port, yellow_road1_Pin, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2180      	movs	r1, #128	; 0x80
 800114e:	4825      	ldr	r0, [pc, #148]	; (80011e4 <fsm_for_button0+0x1bc>)
 8001150:	f001 f889 	bl	8002266 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yellow_road2_GPIO_Port, yellow_road2_Pin, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800115a:	4822      	ldr	r0, [pc, #136]	; (80011e4 <fsm_for_button0+0x1bc>)
 800115c:	f001 f883 	bl	8002266 <HAL_GPIO_WritePin>
				current_mode=2;
 8001160:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <fsm_for_button0+0x1c0>)
 8001162:	2202      	movs	r2, #2
 8001164:	601a      	str	r2, [r3, #0]
			break;
 8001166:	e02a      	b.n	80011be <fsm_for_button0+0x196>
			  status_12_leds= MODE_GREEN;
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <fsm_for_button0+0x1b8>)
 800116a:	2203      	movs	r2, #3
 800116c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(red_road1_GPIO_Port, red_road1_Pin, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2120      	movs	r1, #32
 8001172:	481c      	ldr	r0, [pc, #112]	; (80011e4 <fsm_for_button0+0x1bc>)
 8001174:	f001 f877 	bl	8002266 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(red_road2_GPIO_Port, red_road2_Pin, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117e:	4819      	ldr	r0, [pc, #100]	; (80011e4 <fsm_for_button0+0x1bc>)
 8001180:	f001 f871 	bl	8002266 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(green_road1_GPIO_Port, green_road1_Pin, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	2140      	movs	r1, #64	; 0x40
 8001188:	4816      	ldr	r0, [pc, #88]	; (80011e4 <fsm_for_button0+0x1bc>)
 800118a:	f001 f86c 	bl	8002266 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(green_road2_GPIO_Port, green_road2_Pin, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001194:	4813      	ldr	r0, [pc, #76]	; (80011e4 <fsm_for_button0+0x1bc>)
 8001196:	f001 f866 	bl	8002266 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yellow_road1_GPIO_Port, yellow_road1_Pin, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2180      	movs	r1, #128	; 0x80
 800119e:	4811      	ldr	r0, [pc, #68]	; (80011e4 <fsm_for_button0+0x1bc>)
 80011a0:	f001 f861 	bl	8002266 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yellow_road2_GPIO_Port, yellow_road2_Pin, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011aa:	480e      	ldr	r0, [pc, #56]	; (80011e4 <fsm_for_button0+0x1bc>)
 80011ac:	f001 f85b 	bl	8002266 <HAL_GPIO_WritePin>
				current_mode++;
 80011b0:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <fsm_for_button0+0x1c0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	4a0c      	ldr	r2, [pc, #48]	; (80011e8 <fsm_for_button0+0x1c0>)
 80011b8:	6013      	str	r3, [r2, #0]
			break;
 80011ba:	e000      	b.n	80011be <fsm_for_button0+0x196>
		default: break;
 80011bc:	bf00      	nop
		if (! (is_button0_pressed () == 1)  ) {
 80011be:	f000 f913 	bl	80013e8 <is_button0_pressed>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d005      	beq.n	80011d4 <fsm_for_button0+0x1ac>
			button0 = BUTTON_RELEASED ;
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <fsm_for_button0+0x1b4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
		 break ;
 80011ce:	e001      	b.n	80011d4 <fsm_for_button0+0x1ac>
		 break ;
 80011d0:	bf00      	nop
 80011d2:	e000      	b.n	80011d6 <fsm_for_button0+0x1ae>
		 break ;
 80011d4:	bf00      	nop
 	 }
 }
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200000a0 	.word	0x200000a0
 80011e0:	200000d0 	.word	0x200000d0
 80011e4:	40010800 	.word	0x40010800
 80011e8:	2000001c 	.word	0x2000001c

080011ec <fsm_for_button1>:
void fsm_for_button1 (void ) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
switch ( button1 ){
 80011f0:	4b32      	ldr	r3, [pc, #200]	; (80012bc <fsm_for_button1+0xd0>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <fsm_for_button1+0x12>
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d009      	beq.n	8001210 <fsm_for_button1+0x24>
		if (! (is_button1_pressed () == 1)  ) {
			button1 = BUTTON_RELEASED ;
		}
		 break ;
 	 }
 }
 80011fc:	e05c      	b.n	80012b8 <fsm_for_button1+0xcc>
		if( is_button1_pressed () == 1  ) {
 80011fe:	f000 f969 	bl	80014d4 <is_button1_pressed>
 8001202:	4603      	mov	r3, r0
 8001204:	2b01      	cmp	r3, #1
 8001206:	d154      	bne.n	80012b2 <fsm_for_button1+0xc6>
			button1 = BUTTON_PRESSED ;
 8001208:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <fsm_for_button1+0xd0>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
		 break ;
 800120e:	e050      	b.n	80012b2 <fsm_for_button1+0xc6>
	switch(status_12_leds) {
 8001210:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <fsm_for_button1+0xd4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b04      	cmp	r3, #4
 8001216:	d02e      	beq.n	8001276 <fsm_for_button1+0x8a>
 8001218:	2b04      	cmp	r3, #4
 800121a:	dc40      	bgt.n	800129e <fsm_for_button1+0xb2>
 800121c:	2b02      	cmp	r3, #2
 800121e:	d002      	beq.n	8001226 <fsm_for_button1+0x3a>
 8001220:	2b03      	cmp	r3, #3
 8001222:	d014      	beq.n	800124e <fsm_for_button1+0x62>
		default:break;
 8001224:	e03b      	b.n	800129e <fsm_for_button1+0xb2>
			  red_buffer++;
 8001226:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <fsm_for_button1+0xd8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	4a25      	ldr	r2, [pc, #148]	; (80012c4 <fsm_for_button1+0xd8>)
 800122e:	6013      	str	r3, [r2, #0]
			  red_buffer = red_buffer%100;
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <fsm_for_button1+0xd8>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <fsm_for_button1+0xdc>)
 8001236:	fb83 1302 	smull	r1, r3, r3, r2
 800123a:	1159      	asrs	r1, r3, #5
 800123c:	17d3      	asrs	r3, r2, #31
 800123e:	1acb      	subs	r3, r1, r3
 8001240:	2164      	movs	r1, #100	; 0x64
 8001242:	fb01 f303 	mul.w	r3, r1, r3
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <fsm_for_button1+0xd8>)
 800124a:	6013      	str	r3, [r2, #0]
			break;
 800124c:	e028      	b.n	80012a0 <fsm_for_button1+0xb4>
			  green_buffer++;
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <fsm_for_button1+0xe0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	4a1d      	ldr	r2, [pc, #116]	; (80012cc <fsm_for_button1+0xe0>)
 8001256:	6013      	str	r3, [r2, #0]
			  green_buffer = green_buffer%100;
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <fsm_for_button1+0xe0>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <fsm_for_button1+0xdc>)
 800125e:	fb83 1302 	smull	r1, r3, r3, r2
 8001262:	1159      	asrs	r1, r3, #5
 8001264:	17d3      	asrs	r3, r2, #31
 8001266:	1acb      	subs	r3, r1, r3
 8001268:	2164      	movs	r1, #100	; 0x64
 800126a:	fb01 f303 	mul.w	r3, r1, r3
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	4a16      	ldr	r2, [pc, #88]	; (80012cc <fsm_for_button1+0xe0>)
 8001272:	6013      	str	r3, [r2, #0]
			break;
 8001274:	e014      	b.n	80012a0 <fsm_for_button1+0xb4>
			  yellow_buffer++;
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <fsm_for_button1+0xe4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <fsm_for_button1+0xe4>)
 800127e:	6013      	str	r3, [r2, #0]
			  yellow_buffer = yellow_buffer%100;
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <fsm_for_button1+0xe4>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <fsm_for_button1+0xdc>)
 8001286:	fb83 1302 	smull	r1, r3, r3, r2
 800128a:	1159      	asrs	r1, r3, #5
 800128c:	17d3      	asrs	r3, r2, #31
 800128e:	1acb      	subs	r3, r1, r3
 8001290:	2164      	movs	r1, #100	; 0x64
 8001292:	fb01 f303 	mul.w	r3, r1, r3
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <fsm_for_button1+0xe4>)
 800129a:	6013      	str	r3, [r2, #0]
			break;
 800129c:	e000      	b.n	80012a0 <fsm_for_button1+0xb4>
		default:break;
 800129e:	bf00      	nop
		if (! (is_button1_pressed () == 1)  ) {
 80012a0:	f000 f918 	bl	80014d4 <is_button1_pressed>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d005      	beq.n	80012b6 <fsm_for_button1+0xca>
			button1 = BUTTON_RELEASED ;
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <fsm_for_button1+0xd0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
		 break ;
 80012b0:	e001      	b.n	80012b6 <fsm_for_button1+0xca>
		 break ;
 80012b2:	bf00      	nop
 80012b4:	e000      	b.n	80012b8 <fsm_for_button1+0xcc>
		 break ;
 80012b6:	bf00      	nop
 }
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200000a1 	.word	0x200000a1
 80012c0:	200000d0 	.word	0x200000d0
 80012c4:	20000020 	.word	0x20000020
 80012c8:	51eb851f 	.word	0x51eb851f
 80012cc:	20000024 	.word	0x20000024
 80012d0:	20000028 	.word	0x20000028

080012d4 <fsm_for_button2>:
void fsm_for_button2 (void ) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
switch ( button2 ){
 80012d8:	4b3a      	ldr	r3, [pc, #232]	; (80013c4 <fsm_for_button2+0xf0>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <fsm_for_button2+0x12>
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d009      	beq.n	80012f8 <fsm_for_button2+0x24>
		if (! (is_button2_pressed () == 1)  ) {
			button2 = BUTTON_RELEASED ;
		}
		 break ;
 	 }
 }
 80012e4:	e06b      	b.n	80013be <fsm_for_button2+0xea>
		if( is_button2_pressed () == 1 ) {
 80012e6:	f000 f971 	bl	80015cc <is_button2_pressed>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d163      	bne.n	80013b8 <fsm_for_button2+0xe4>
			button2 = BUTTON_PRESSED ;
 80012f0:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <fsm_for_button2+0xf0>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
		 break ;
 80012f6:	e05f      	b.n	80013b8 <fsm_for_button2+0xe4>
	switch (status_12_leds) {
 80012f8:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <fsm_for_button2+0xf4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	d01f      	beq.n	8001340 <fsm_for_button2+0x6c>
 8001300:	2b04      	cmp	r3, #4
 8001302:	dc4f      	bgt.n	80013a4 <fsm_for_button2+0xd0>
 8001304:	2b02      	cmp	r3, #2
 8001306:	d002      	beq.n	800130e <fsm_for_button2+0x3a>
 8001308:	2b03      	cmp	r3, #3
 800130a:	d032      	beq.n	8001372 <fsm_for_button2+0x9e>
		default:break;
 800130c:	e04a      	b.n	80013a4 <fsm_for_button2+0xd0>
			  red_time = red_buffer;
 800130e:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <fsm_for_button2+0xf8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a2f      	ldr	r2, [pc, #188]	; (80013d0 <fsm_for_button2+0xfc>)
 8001314:	6013      	str	r3, [r2, #0]
			  red_buffer = red_time;
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <fsm_for_button2+0xfc>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a2c      	ldr	r2, [pc, #176]	; (80013cc <fsm_for_button2+0xf8>)
 800131c:	6013      	str	r3, [r2, #0]
			  yellow_buffer = yellow_time;
 800131e:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <fsm_for_button2+0x100>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a2d      	ldr	r2, [pc, #180]	; (80013d8 <fsm_for_button2+0x104>)
 8001324:	6013      	str	r3, [r2, #0]
			  green_buffer = green_time;
 8001326:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <fsm_for_button2+0x108>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a2d      	ldr	r2, [pc, #180]	; (80013e0 <fsm_for_button2+0x10c>)
 800132c:	6013      	str	r3, [r2, #0]
			  status_12_leds = SHOWING;
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <fsm_for_button2+0xf4>)
 8001330:	2201      	movs	r2, #1
 8001332:	601a      	str	r2, [r3, #0]
			  current_mode=1;
 8001334:	4b2b      	ldr	r3, [pc, #172]	; (80013e4 <fsm_for_button2+0x110>)
 8001336:	2201      	movs	r2, #1
 8001338:	601a      	str	r2, [r3, #0]
			  setINIT_SHOWING();
 800133a:	f7ff fe55 	bl	8000fe8 <setINIT_SHOWING>
			break;
 800133e:	e032      	b.n	80013a6 <fsm_for_button2+0xd2>
			  yellow_time = yellow_buffer;
 8001340:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <fsm_for_button2+0x104>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a23      	ldr	r2, [pc, #140]	; (80013d4 <fsm_for_button2+0x100>)
 8001346:	6013      	str	r3, [r2, #0]
			  yellow_buffer = yellow_time;
 8001348:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <fsm_for_button2+0x100>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a22      	ldr	r2, [pc, #136]	; (80013d8 <fsm_for_button2+0x104>)
 800134e:	6013      	str	r3, [r2, #0]
			  red_buffer = red_time;
 8001350:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <fsm_for_button2+0xfc>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a1d      	ldr	r2, [pc, #116]	; (80013cc <fsm_for_button2+0xf8>)
 8001356:	6013      	str	r3, [r2, #0]
			  green_buffer = green_time;
 8001358:	4b20      	ldr	r3, [pc, #128]	; (80013dc <fsm_for_button2+0x108>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <fsm_for_button2+0x10c>)
 800135e:	6013      	str	r3, [r2, #0]
			  status_12_leds = SHOWING;
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <fsm_for_button2+0xf4>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]
			  current_mode=1;
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <fsm_for_button2+0x110>)
 8001368:	2201      	movs	r2, #1
 800136a:	601a      	str	r2, [r3, #0]
			  setINIT_SHOWING();
 800136c:	f7ff fe3c 	bl	8000fe8 <setINIT_SHOWING>
			break;
 8001370:	e019      	b.n	80013a6 <fsm_for_button2+0xd2>
			  green_time = green_buffer;
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <fsm_for_button2+0x10c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a19      	ldr	r2, [pc, #100]	; (80013dc <fsm_for_button2+0x108>)
 8001378:	6013      	str	r3, [r2, #0]
			  green_buffer = green_time;
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <fsm_for_button2+0x108>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a18      	ldr	r2, [pc, #96]	; (80013e0 <fsm_for_button2+0x10c>)
 8001380:	6013      	str	r3, [r2, #0]
			  red_buffer = red_time;
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <fsm_for_button2+0xfc>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a11      	ldr	r2, [pc, #68]	; (80013cc <fsm_for_button2+0xf8>)
 8001388:	6013      	str	r3, [r2, #0]
			  yellow_buffer = yellow_time;
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <fsm_for_button2+0x100>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <fsm_for_button2+0x104>)
 8001390:	6013      	str	r3, [r2, #0]
			  status_12_leds = SHOWING;
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <fsm_for_button2+0xf4>)
 8001394:	2201      	movs	r2, #1
 8001396:	601a      	str	r2, [r3, #0]
			  current_mode=1;
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <fsm_for_button2+0x110>)
 800139a:	2201      	movs	r2, #1
 800139c:	601a      	str	r2, [r3, #0]
			  setINIT_SHOWING();
 800139e:	f7ff fe23 	bl	8000fe8 <setINIT_SHOWING>
			break;
 80013a2:	e000      	b.n	80013a6 <fsm_for_button2+0xd2>
		default:break;
 80013a4:	bf00      	nop
		if (! (is_button2_pressed () == 1)  ) {
 80013a6:	f000 f911 	bl	80015cc <is_button2_pressed>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d005      	beq.n	80013bc <fsm_for_button2+0xe8>
			button2 = BUTTON_RELEASED ;
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <fsm_for_button2+0xf0>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
		 break ;
 80013b6:	e001      	b.n	80013bc <fsm_for_button2+0xe8>
		 break ;
 80013b8:	bf00      	nop
 80013ba:	e000      	b.n	80013be <fsm_for_button2+0xea>
		 break ;
 80013bc:	bf00      	nop
 }
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200000a2 	.word	0x200000a2
 80013c8:	200000d0 	.word	0x200000d0
 80013cc:	20000020 	.word	0x20000020
 80013d0:	20000004 	.word	0x20000004
 80013d4:	2000000c 	.word	0x2000000c
 80013d8:	20000028 	.word	0x20000028
 80013dc:	20000008 	.word	0x20000008
 80013e0:	20000024 	.word	0x20000024
 80013e4:	2000001c 	.word	0x2000001c

080013e8 <is_button0_pressed>:
int keyReg2_2 = BUTTON_IS_RELEASED;
int keyReg3_2 = BUTTON_IS_RELEASED;
int counter2 = 0;
int btn2_flag = 0;

int is_button0_pressed(){
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
	if(btn0_flag==1)
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <is_button0_pressed+0x20>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d104      	bne.n	80013fe <is_button0_pressed+0x16>
	{
		btn0_flag=0;
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <is_button0_pressed+0x20>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
		return 1;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <is_button0_pressed+0x18>
	}
	else return 0;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	200000a8 	.word	0x200000a8

0800140c <subKeyProcess0>:

void subKeyProcess0(){
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
	btn0_flag=1;
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <subKeyProcess0+0x14>)
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	200000a8 	.word	0x200000a8

08001424 <button_reading0>:

 void button_reading0 ( void ) {
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	 keyReg0_0 = keyReg1_0;
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <button_reading0+0x94>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a23      	ldr	r2, [pc, #140]	; (80014bc <button_reading0+0x98>)
 800142e:	6013      	str	r3, [r2, #0]
	 keyReg1_0 = keyReg2_0;
 8001430:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <button_reading0+0x9c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a20      	ldr	r2, [pc, #128]	; (80014b8 <button_reading0+0x94>)
 8001436:	6013      	str	r3, [r2, #0]
	 keyReg2_0 = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 8001438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800143c:	4821      	ldr	r0, [pc, #132]	; (80014c4 <button_reading0+0xa0>)
 800143e:	f000 fefb 	bl	8002238 <HAL_GPIO_ReadPin>
 8001442:	4603      	mov	r3, r0
 8001444:	461a      	mov	r2, r3
 8001446:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <button_reading0+0x9c>)
 8001448:	601a      	str	r2, [r3, #0]
	 if(keyReg0_0==keyReg1_0 && keyReg1_0==keyReg2_0){
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <button_reading0+0x98>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <button_reading0+0x94>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d12e      	bne.n	80014b4 <button_reading0+0x90>
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <button_reading0+0x94>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <button_reading0+0x9c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d128      	bne.n	80014b4 <button_reading0+0x90>
		 if(keyReg3_0 != keyReg2_0)
 8001462:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <button_reading0+0xa4>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <button_reading0+0x9c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d012      	beq.n	8001494 <button_reading0+0x70>
		 {
			 keyReg3_0 = keyReg2_0;
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <button_reading0+0x9c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a15      	ldr	r2, [pc, #84]	; (80014c8 <button_reading0+0xa4>)
 8001474:	6013      	str	r3, [r2, #0]
			 if(keyReg2_0 == BUTTON_IS_PRESSED)
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <button_reading0+0x9c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d11a      	bne.n	80014b4 <button_reading0+0x90>
			 {
				 subKeyProcess0();
 800147e:	f7ff ffc5 	bl	800140c <subKeyProcess0>
				 counter0 = DURATION_FOR_AUTO_INCREASING;
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <button_reading0+0xa8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800148a:	fb92 f3f3 	sdiv	r3, r2, r3
 800148e:	4a10      	ldr	r2, [pc, #64]	; (80014d0 <button_reading0+0xac>)
 8001490:	6013      	str	r3, [r2, #0]
				 keyReg3_0=BUTTON_IS_RELEASED;
				 }
			 }
		 }
	 }
 }
 8001492:	e00f      	b.n	80014b4 <button_reading0+0x90>
			 if(counter0>0)
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <button_reading0+0xac>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	dd0b      	ble.n	80014b4 <button_reading0+0x90>
			 counter0--;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <button_reading0+0xac>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <button_reading0+0xac>)
 80014a4:	6013      	str	r3, [r2, #0]
			 if(counter0<=0)
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <button_reading0+0xac>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	dc02      	bgt.n	80014b4 <button_reading0+0x90>
				 keyReg3_0=BUTTON_IS_RELEASED;
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <button_reading0+0xa4>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]
 }
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	2000003c 	.word	0x2000003c
 80014bc:	20000038 	.word	0x20000038
 80014c0:	20000040 	.word	0x20000040
 80014c4:	40011000 	.word	0x40011000
 80014c8:	20000044 	.word	0x20000044
 80014cc:	200000e0 	.word	0x200000e0
 80014d0:	200000a4 	.word	0x200000a4

080014d4 <is_button1_pressed>:

 int is_button1_pressed(){
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
 	if(btn1_flag==1)
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <is_button1_pressed+0x20>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d104      	bne.n	80014ea <is_button1_pressed+0x16>
 	{
 		btn1_flag=0;
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <is_button1_pressed+0x20>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 		return 1;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <is_button1_pressed+0x18>
 	}
 	else return 0;
 80014ea:	2300      	movs	r3, #0
 }
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	200000b0 	.word	0x200000b0

080014f8 <subKeyProcess1>:

 void subKeyProcess1(){
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
 	btn1_flag=1;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <subKeyProcess1+0x14>)
 80014fe:	2201      	movs	r2, #1
 8001500:	601a      	str	r2, [r3, #0]
 }
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	200000b0 	.word	0x200000b0

08001510 <button_reading1>:

  void button_reading1 ( void ) {
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
 	 keyReg0_1 = keyReg1_1;
 8001514:	4b26      	ldr	r3, [pc, #152]	; (80015b0 <button_reading1+0xa0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a26      	ldr	r2, [pc, #152]	; (80015b4 <button_reading1+0xa4>)
 800151a:	6013      	str	r3, [r2, #0]
 	 keyReg1_1 = keyReg2_1;
 800151c:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <button_reading1+0xa8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a23      	ldr	r2, [pc, #140]	; (80015b0 <button_reading1+0xa0>)
 8001522:	6013      	str	r3, [r2, #0]
 	 keyReg2_1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8001524:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001528:	4824      	ldr	r0, [pc, #144]	; (80015bc <button_reading1+0xac>)
 800152a:	f000 fe85 	bl	8002238 <HAL_GPIO_ReadPin>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <button_reading1+0xa8>)
 8001534:	601a      	str	r2, [r3, #0]
 	 if(keyReg0_1==keyReg1_1 && keyReg1_1==keyReg2_1){
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <button_reading1+0xa4>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <button_reading1+0xa0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d133      	bne.n	80015aa <button_reading1+0x9a>
 8001542:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <button_reading1+0xa0>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <button_reading1+0xa8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d12d      	bne.n	80015aa <button_reading1+0x9a>
 		 if(keyReg3_1 != keyReg2_1)
 800154e:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <button_reading1+0xb0>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <button_reading1+0xa8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d017      	beq.n	800158a <button_reading1+0x7a>
 		 {
 			 keyReg3_1 = keyReg2_1;
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <button_reading1+0xa8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a18      	ldr	r2, [pc, #96]	; (80015c0 <button_reading1+0xb0>)
 8001560:	6013      	str	r3, [r2, #0]
 			 if(keyReg2_1 == BUTTON_IS_PRESSED)
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <button_reading1+0xa8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d11f      	bne.n	80015aa <button_reading1+0x9a>
 			 {
 				 subKeyProcess1();
 800156a:	f7ff ffc5 	bl	80014f8 <subKeyProcess1>
 				 counter1 = DURATION_FOR_AUTO_INCREASING/4;
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <button_reading1+0xb4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001576:	fb92 f3f3 	sdiv	r3, r2, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	da00      	bge.n	8001580 <button_reading1+0x70>
 800157e:	3303      	adds	r3, #3
 8001580:	109b      	asrs	r3, r3, #2
 8001582:	461a      	mov	r2, r3
 8001584:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <button_reading1+0xb8>)
 8001586:	601a      	str	r2, [r3, #0]
 				 keyReg3_1=BUTTON_IS_RELEASED;
 				 }
 			 }
 		 }
 	 }
  }
 8001588:	e00f      	b.n	80015aa <button_reading1+0x9a>
 			 if(counter1>0)
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <button_reading1+0xb8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	dd0b      	ble.n	80015aa <button_reading1+0x9a>
 			 counter1--;
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <button_reading1+0xb8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	3b01      	subs	r3, #1
 8001598:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <button_reading1+0xb8>)
 800159a:	6013      	str	r3, [r2, #0]
 			 if(counter1<=0)
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <button_reading1+0xb8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	dc02      	bgt.n	80015aa <button_reading1+0x9a>
 				 keyReg3_1=BUTTON_IS_RELEASED;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <button_reading1+0xb0>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
  }
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000004c 	.word	0x2000004c
 80015b4:	20000048 	.word	0x20000048
 80015b8:	20000050 	.word	0x20000050
 80015bc:	40011000 	.word	0x40011000
 80015c0:	20000054 	.word	0x20000054
 80015c4:	200000e0 	.word	0x200000e0
 80015c8:	200000ac 	.word	0x200000ac

080015cc <is_button2_pressed>:

  int is_button2_pressed(){
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  	if(btn2_flag==1)
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <is_button2_pressed+0x20>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d104      	bne.n	80015e2 <is_button2_pressed+0x16>
  	{
  		btn2_flag=0;
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <is_button2_pressed+0x20>)
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
  		return 1;
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <is_button2_pressed+0x18>
  	}
  	else return 0;
 80015e2:	2300      	movs	r3, #0
  }
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	200000b8 	.word	0x200000b8

080015f0 <subKeyProcess2>:

  void subKeyProcess2(){
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  	btn2_flag=1;
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <subKeyProcess2+0x14>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
  }
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	200000b8 	.word	0x200000b8

08001608 <button_reading2>:

   void button_reading2 ( void ) {
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  	 keyReg0_2 = keyReg1_2;
 800160c:	4b23      	ldr	r3, [pc, #140]	; (800169c <button_reading2+0x94>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a23      	ldr	r2, [pc, #140]	; (80016a0 <button_reading2+0x98>)
 8001612:	6013      	str	r3, [r2, #0]
  	 keyReg1_2 = keyReg2_2;
 8001614:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <button_reading2+0x9c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a20      	ldr	r2, [pc, #128]	; (800169c <button_reading2+0x94>)
 800161a:	6013      	str	r3, [r2, #0]
  	 keyReg2_2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800161c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001620:	4821      	ldr	r0, [pc, #132]	; (80016a8 <button_reading2+0xa0>)
 8001622:	f000 fe09 	bl	8002238 <HAL_GPIO_ReadPin>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <button_reading2+0x9c>)
 800162c:	601a      	str	r2, [r3, #0]
  	 if(keyReg0_2==keyReg1_2 && keyReg1_2==keyReg2_2){
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <button_reading2+0x98>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <button_reading2+0x94>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d12e      	bne.n	8001698 <button_reading2+0x90>
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <button_reading2+0x94>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <button_reading2+0x9c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d128      	bne.n	8001698 <button_reading2+0x90>
  		 if(keyReg3_2 != keyReg2_2)
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <button_reading2+0xa4>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <button_reading2+0x9c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d012      	beq.n	8001678 <button_reading2+0x70>
  		 {
  			 keyReg3_2 = keyReg2_2;
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <button_reading2+0x9c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a15      	ldr	r2, [pc, #84]	; (80016ac <button_reading2+0xa4>)
 8001658:	6013      	str	r3, [r2, #0]
  			 if(keyReg2_2 == BUTTON_IS_PRESSED)
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <button_reading2+0x9c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d11a      	bne.n	8001698 <button_reading2+0x90>
  			 {
  				 subKeyProcess2();
 8001662:	f7ff ffc5 	bl	80015f0 <subKeyProcess2>
  				 counter2 = DURATION_FOR_AUTO_INCREASING;
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <button_reading2+0xa8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800166e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001672:	4a10      	ldr	r2, [pc, #64]	; (80016b4 <button_reading2+0xac>)
 8001674:	6013      	str	r3, [r2, #0]
  				 keyReg3_2=BUTTON_IS_RELEASED;
  				 }
  			 }
  		 }
  	 }
   }
 8001676:	e00f      	b.n	8001698 <button_reading2+0x90>
  			 if(counter2>0)
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <button_reading2+0xac>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	dd0b      	ble.n	8001698 <button_reading2+0x90>
  			 counter2--;
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <button_reading2+0xac>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3b01      	subs	r3, #1
 8001686:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <button_reading2+0xac>)
 8001688:	6013      	str	r3, [r2, #0]
  			 if(counter2<=0)
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <button_reading2+0xac>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	dc02      	bgt.n	8001698 <button_reading2+0x90>
  				 keyReg3_2=BUTTON_IS_RELEASED;
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <button_reading2+0xa4>)
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]
   }
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	2000005c 	.word	0x2000005c
 80016a0:	20000058 	.word	0x20000058
 80016a4:	20000060 	.word	0x20000060
 80016a8:	40011000 	.word	0x40011000
 80016ac:	20000064 	.word	0x20000064
 80016b0:	200000e0 	.word	0x200000e0
 80016b4:	200000b4 	.word	0x200000b4

080016b8 <setTimer_led_blinking_2Hz>:
#include "led_blinking_2Hz_timer.h"

int led_blinking_2Hz_flag = 0;
int led_blinking_2Hz_counter = 0;

void setTimer_led_blinking_2Hz(int duration){
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	led_blinking_2Hz_counter = duration/time_interupt_duration;
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <setTimer_led_blinking_2Hz+0x28>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ca:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <setTimer_led_blinking_2Hz+0x2c>)
 80016cc:	6013      	str	r3, [r2, #0]
	led_blinking_2Hz_flag = 0;
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <setTimer_led_blinking_2Hz+0x30>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	200000e0 	.word	0x200000e0
 80016e4:	200000bc 	.word	0x200000bc
 80016e8:	200000c0 	.word	0x200000c0

080016ec <timer_led_blinking_2Hz_run>:
void timer_led_blinking_2Hz_run(void) {
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
	if(led_blinking_2Hz_counter>0)
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <timer_led_blinking_2Hz_run+0x2c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	dd0b      	ble.n	8001710 <timer_led_blinking_2Hz_run+0x24>
	{
		led_blinking_2Hz_counter--;
 80016f8:	4b07      	ldr	r3, [pc, #28]	; (8001718 <timer_led_blinking_2Hz_run+0x2c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	4a06      	ldr	r2, [pc, #24]	; (8001718 <timer_led_blinking_2Hz_run+0x2c>)
 8001700:	6013      	str	r3, [r2, #0]
		if(led_blinking_2Hz_counter<=0)
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <timer_led_blinking_2Hz_run+0x2c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	dc02      	bgt.n	8001710 <timer_led_blinking_2Hz_run+0x24>
		{
			led_blinking_2Hz_flag=1;
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <timer_led_blinking_2Hz_run+0x30>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	200000bc 	.word	0x200000bc
 800171c:	200000c0 	.word	0x200000c0

08001720 <setTimer_led_health>:
#include "led_health_timer.h"

int led_health_flag;
int led_health_counter;

void setTimer_led_health(int duration) {
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	led_health_counter = duration/time_interupt_duration;
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <setTimer_led_health+0x28>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001732:	4a06      	ldr	r2, [pc, #24]	; (800174c <setTimer_led_health+0x2c>)
 8001734:	6013      	str	r3, [r2, #0]
	led_health_flag = 0;
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <setTimer_led_health+0x30>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	200000e0 	.word	0x200000e0
 800174c:	200000cc 	.word	0x200000cc
 8001750:	200000f0 	.word	0x200000f0

08001754 <timer_led_health_run>:
void timer_led_health_run(void) {
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
	if(led_health_counter>0)
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <timer_led_health_run+0x2c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	dd0b      	ble.n	8001778 <timer_led_health_run+0x24>
	{
		led_health_counter--;
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <timer_led_health_run+0x2c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3b01      	subs	r3, #1
 8001766:	4a06      	ldr	r2, [pc, #24]	; (8001780 <timer_led_health_run+0x2c>)
 8001768:	6013      	str	r3, [r2, #0]
		if(led_health_counter<=0) led_health_flag=1;
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <timer_led_health_run+0x2c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	dc02      	bgt.n	8001778 <timer_led_health_run+0x24>
 8001772:	4b04      	ldr	r3, [pc, #16]	; (8001784 <timer_led_health_run+0x30>)
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]
	}
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	200000cc 	.word	0x200000cc
 8001784:	200000f0 	.word	0x200000f0

08001788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800178e:	f000 fa69 	bl	8001c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001792:	f000 f897 	bl	80018c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001796:	f000 f91d 	bl	80019d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800179a:	f000 f8cf 	bl	800193c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 800179e:	4841      	ldr	r0, [pc, #260]	; (80018a4 <main+0x11c>)
 80017a0:	f001 f9ca 	bl	8002b38 <HAL_TIM_Base_Start_IT>
	prescaler_htim2 = htim2.Init.Prescaler ;
 80017a4:	4b3f      	ldr	r3, [pc, #252]	; (80018a4 <main+0x11c>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	461a      	mov	r2, r3
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	493e      	ldr	r1, [pc, #248]	; (80018a8 <main+0x120>)
 80017b0:	e9c1 2300 	strd	r2, r3, [r1]
	periodCounter_htim2 = htim2.Init.Period;
 80017b4:	4b3b      	ldr	r3, [pc, #236]	; (80018a4 <main+0x11c>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	461a      	mov	r2, r3
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	493b      	ldr	r1, [pc, #236]	; (80018ac <main+0x124>)
 80017c0:	e9c1 2300 	strd	r2, r3, [r1]
	time_interupt_duration = 1000/(totalHz/((prescaler_htim2+1)*(periodCounter_htim2+1)));
 80017c4:	4b3a      	ldr	r3, [pc, #232]	; (80018b0 <main+0x128>)
 80017c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ca:	4b37      	ldr	r3, [pc, #220]	; (80018a8 <main+0x120>)
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	f112 0801 	adds.w	r8, r2, #1
 80017d4:	f143 0900 	adc.w	r9, r3, #0
 80017d8:	4b34      	ldr	r3, [pc, #208]	; (80018ac <main+0x124>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	1c54      	adds	r4, r2, #1
 80017e0:	f143 0500 	adc.w	r5, r3, #0
 80017e4:	fb04 f209 	mul.w	r2, r4, r9
 80017e8:	fb08 f305 	mul.w	r3, r8, r5
 80017ec:	18d6      	adds	r6, r2, r3
 80017ee:	fba8 2304 	umull	r2, r3, r8, r4
 80017f2:	18f4      	adds	r4, r6, r3
 80017f4:	4623      	mov	r3, r4
 80017f6:	f7fe fca9 	bl	800014c <__aeabi_ldivmod>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001802:	f04f 0100 	mov.w	r1, #0
 8001806:	f7fe fca1 	bl	800014c <__aeabi_ldivmod>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4b29      	ldr	r3, [pc, #164]	; (80018b4 <main+0x12c>)
 8001810:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  status_12_leds = SHOWING;
 8001812:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <main+0x130>)
 8001814:	2201      	movs	r2, #1
 8001816:	601a      	str	r2, [r3, #0]
  setTimer_led_blinking_2Hz(1000);
 8001818:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800181c:	f7ff ff4c 	bl	80016b8 <setTimer_led_blinking_2Hz>
  setTimer_led_health(1000);
 8001820:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001824:	f7ff ff7c 	bl	8001720 <setTimer_led_health>
  setTimer_12_leds(1000);
 8001828:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800182c:	f7fe fe42 	bl	80004b4 <setTimer_12_leds>
  setTimer_7_segments_counter(1000);
 8001830:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001834:	f7ff f8bc 	bl	80009b0 <setTimer_7_segments_counter>
	HAL_GPIO_WritePin(red_road1_GPIO_Port, red_road1_Pin, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	2120      	movs	r1, #32
 800183c:	481f      	ldr	r0, [pc, #124]	; (80018bc <main+0x134>)
 800183e:	f000 fd12 	bl	8002266 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(red_road2_GPIO_Port, red_road2_Pin, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001848:	481c      	ldr	r0, [pc, #112]	; (80018bc <main+0x134>)
 800184a:	f000 fd0c 	bl	8002266 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green_road1_GPIO_Port, green_road1_Pin, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2140      	movs	r1, #64	; 0x40
 8001852:	481a      	ldr	r0, [pc, #104]	; (80018bc <main+0x134>)
 8001854:	f000 fd07 	bl	8002266 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green_road2_GPIO_Port, green_road2_Pin, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800185e:	4817      	ldr	r0, [pc, #92]	; (80018bc <main+0x134>)
 8001860:	f000 fd01 	bl	8002266 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow_road1_GPIO_Port, yellow_road1_Pin, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	2180      	movs	r1, #128	; 0x80
 8001868:	4814      	ldr	r0, [pc, #80]	; (80018bc <main+0x134>)
 800186a:	f000 fcfc 	bl	8002266 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow_road2_GPIO_Port, yellow_road2_Pin, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001874:	4811      	ldr	r0, [pc, #68]	; (80018bc <main+0x134>)
 8001876:	f000 fcf6 	bl	8002266 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_for_button0();
 800187a:	f7ff fbd5 	bl	8001028 <fsm_for_button0>
	  fsm_for_button1();
 800187e:	f7ff fcb5 	bl	80011ec <fsm_for_button1>
	  fsm_for_button2();
 8001882:	f7ff fd27 	bl	80012d4 <fsm_for_button2>
	  fsm_12_leds();
 8001886:	f7ff f8d5 	bl	8000a34 <fsm_12_leds>
    /* USER CODE END WHILE */
	  if(led_health_flag==1)
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <main+0x138>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d1f3      	bne.n	800187a <main+0xf2>
	  {
		  HAL_GPIO_TogglePin(Health_GPIO_Port, Health_Pin);
 8001892:	2108      	movs	r1, #8
 8001894:	4809      	ldr	r0, [pc, #36]	; (80018bc <main+0x134>)
 8001896:	f000 fcfe 	bl	8002296 <HAL_GPIO_TogglePin>
		  setTimer_led_health(1000);
 800189a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800189e:	f7ff ff3f 	bl	8001720 <setTimer_led_health>
	  fsm_for_button0();
 80018a2:	e7ea      	b.n	800187a <main+0xf2>
 80018a4:	200000f4 	.word	0x200000f4
 80018a8:	200000d8 	.word	0x200000d8
 80018ac:	200000e8 	.word	0x200000e8
 80018b0:	20000030 	.word	0x20000030
 80018b4:	200000e0 	.word	0x200000e0
 80018b8:	200000d0 	.word	0x200000d0
 80018bc:	40010800 	.word	0x40010800
 80018c0:	200000f0 	.word	0x200000f0

080018c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b090      	sub	sp, #64	; 0x40
 80018c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ca:	f107 0318 	add.w	r3, r7, #24
 80018ce:	2228      	movs	r2, #40	; 0x28
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f001 fce8 	bl	80032a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ea:	2301      	movs	r3, #1
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018ee:	2310      	movs	r3, #16
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f6:	f107 0318 	add.w	r3, r7, #24
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 fce4 	bl	80022c8 <HAL_RCC_OscConfig>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001906:	f000 f8d7 	bl	8001ab8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800190a:	230f      	movs	r3, #15
 800190c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f000 ff50 	bl	80027c8 <HAL_RCC_ClockConfig>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800192e:	f000 f8c3 	bl	8001ab8 <Error_Handler>
  }
}
 8001932:	bf00      	nop
 8001934:	3740      	adds	r7, #64	; 0x40
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001950:	463b      	mov	r3, r7
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001958:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <MX_TIM2_Init+0x94>)
 800195a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800195e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <MX_TIM2_Init+0x94>)
 8001962:	f240 321f 	movw	r2, #799	; 0x31f
 8001966:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <MX_TIM2_Init+0x94>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <MX_TIM2_Init+0x94>)
 8001970:	2209      	movs	r2, #9
 8001972:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <MX_TIM2_Init+0x94>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <MX_TIM2_Init+0x94>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001980:	4813      	ldr	r0, [pc, #76]	; (80019d0 <MX_TIM2_Init+0x94>)
 8001982:	f001 f889 	bl	8002a98 <HAL_TIM_Base_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800198c:	f000 f894 	bl	8001ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001994:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001996:	f107 0308 	add.w	r3, r7, #8
 800199a:	4619      	mov	r1, r3
 800199c:	480c      	ldr	r0, [pc, #48]	; (80019d0 <MX_TIM2_Init+0x94>)
 800199e:	f001 fa1f 	bl	8002de0 <HAL_TIM_ConfigClockSource>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80019a8:	f000 f886 	bl	8001ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019b4:	463b      	mov	r3, r7
 80019b6:	4619      	mov	r1, r3
 80019b8:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_TIM2_Init+0x94>)
 80019ba:	f001 fbe7 	bl	800318c <HAL_TIMEx_MasterConfigSynchronization>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80019c4:	f000 f878 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200000f4 	.word	0x200000f4

080019d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019da:	f107 0310 	add.w	r3, r7, #16
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e8:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <MX_GPIO_Init+0xd4>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a2e      	ldr	r2, [pc, #184]	; (8001aa8 <MX_GPIO_Init+0xd4>)
 80019ee:	f043 0310 	orr.w	r3, r3, #16
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b2c      	ldr	r3, [pc, #176]	; (8001aa8 <MX_GPIO_Init+0xd4>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a00:	4b29      	ldr	r3, [pc, #164]	; (8001aa8 <MX_GPIO_Init+0xd4>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a28      	ldr	r2, [pc, #160]	; (8001aa8 <MX_GPIO_Init+0xd4>)
 8001a06:	f043 0304 	orr.w	r3, r3, #4
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <MX_GPIO_Init+0xd4>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <MX_GPIO_Init+0xd4>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4a22      	ldr	r2, [pc, #136]	; (8001aa8 <MX_GPIO_Init+0xd4>)
 8001a1e:	f043 0308 	orr.w	r3, r3, #8
 8001a22:	6193      	str	r3, [r2, #24]
 8001a24:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <MX_GPIO_Init+0xd4>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|Health_Pin|red_road1_Pin
 8001a30:	2200      	movs	r2, #0
 8001a32:	f641 71ee 	movw	r1, #8174	; 0x1fee
 8001a36:	481d      	ldr	r0, [pc, #116]	; (8001aac <MX_GPIO_Init+0xd8>)
 8001a38:	f000 fc15 	bl	8002266 <HAL_GPIO_WritePin>
                          |green_road1_Pin|yellow_road1_Pin|red_road2_Pin|green_road2_Pin
                          |yellow_road2_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin|d2_Pin
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001a42:	481b      	ldr	r0, [pc, #108]	; (8001ab0 <MX_GPIO_Init+0xdc>)
 8001a44:	f000 fc0f 	bl	8002266 <HAL_GPIO_WritePin>
                          |e2_Pin|f2_Pin|g2_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin|a2_Pin
                          |b2_Pin|c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8001a48:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a52:	2301      	movs	r3, #1
 8001a54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4815      	ldr	r0, [pc, #84]	; (8001ab4 <MX_GPIO_Init+0xe0>)
 8001a5e:	f000 fa71 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin Health_Pin red_road1_Pin
                           green_road1_Pin yellow_road1_Pin red_road2_Pin green_road2_Pin
                           yellow_road2_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|Health_Pin|red_road1_Pin
 8001a62:	f641 73ee 	movw	r3, #8174	; 0x1fee
 8001a66:	613b      	str	r3, [r7, #16]
                          |green_road1_Pin|yellow_road1_Pin|red_road2_Pin|green_road2_Pin
                          |yellow_road2_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2302      	movs	r3, #2
 8001a72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 0310 	add.w	r3, r7, #16
 8001a78:	4619      	mov	r1, r3
 8001a7a:	480c      	ldr	r0, [pc, #48]	; (8001aac <MX_GPIO_Init+0xd8>)
 8001a7c:	f000 fa62 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : a1_Pin b1_Pin c1_Pin d2_Pin
                           e2_Pin f2_Pin g2_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin a2_Pin
                           b2_Pin c2_Pin */
  GPIO_InitStruct.Pin = a1_Pin|b1_Pin|c1_Pin|d2_Pin
 8001a80:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001a84:	613b      	str	r3, [r7, #16]
                          |e2_Pin|f2_Pin|g2_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin|a2_Pin
                          |b2_Pin|c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a86:	2301      	movs	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a92:	f107 0310 	add.w	r3, r7, #16
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_GPIO_Init+0xdc>)
 8001a9a:	f000 fa53 	bl	8001f44 <HAL_GPIO_Init>

}
 8001a9e:	bf00      	nop
 8001aa0:	3720      	adds	r7, #32
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40010800 	.word	0x40010800
 8001ab0:	40010c00 	.word	0x40010c00
 8001ab4:	40011000 	.word	0x40011000

08001ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001abc:	b672      	cpsid	i
}
 8001abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <Error_Handler+0x8>
	...

08001ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_MspInit+0x5c>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <HAL_MspInit+0x5c>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6193      	str	r3, [r2, #24]
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_MspInit+0x5c>)
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_MspInit+0x5c>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <HAL_MspInit+0x5c>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	61d3      	str	r3, [r2, #28]
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <HAL_MspInit+0x5c>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_MspInit+0x60>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <HAL_MspInit+0x60>)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010000 	.word	0x40010000

08001b28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b38:	d113      	bne.n	8001b62 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_TIM_Base_MspInit+0x44>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <HAL_TIM_Base_MspInit+0x44>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	61d3      	str	r3, [r2, #28]
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_TIM_Base_MspInit+0x44>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	201c      	movs	r0, #28
 8001b58:	f000 f9bd 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b5c:	201c      	movs	r0, #28
 8001b5e:	f000 f9d6 	bl	8001f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000

08001b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <NMI_Handler+0x4>

08001b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7a:	e7fe      	b.n	8001b7a <HardFault_Handler+0x4>

08001b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <MemManage_Handler+0x4>

08001b82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <BusFault_Handler+0x4>

08001b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <UsageFault_Handler+0x4>

08001b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr

08001bb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb6:	f000 f89b 	bl	8001cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <TIM2_IRQHandler+0x10>)
 8001bc6:	f001 f803 	bl	8002bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200000f4 	.word	0x200000f4

08001bd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <HAL_TIM_PeriodElapsedCallback>:


#include "timer.h"
#include "main.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf0:	d10d      	bne.n	8001c0e <HAL_TIM_PeriodElapsedCallback+0x2e>
		button_reading0();
 8001bf2:	f7ff fc17 	bl	8001424 <button_reading0>
		button_reading1();
 8001bf6:	f7ff fc8b 	bl	8001510 <button_reading1>
		button_reading2();
 8001bfa:	f7ff fd05 	bl	8001608 <button_reading2>
		timer_led_blinking_2Hz_run();
 8001bfe:	f7ff fd75 	bl	80016ec <timer_led_blinking_2Hz_run>
		timer_led_health_run();
 8001c02:	f7ff fda7 	bl	8001754 <timer_led_health_run>
		timer_12_leds_run();
 8001c06:	f7fe fc6f 	bl	80004e8 <timer_12_leds_run>
		timer_7_segments_counter_run();
 8001c0a:	f7fe feeb 	bl	80009e4 <timer_7_segments_counter_run>
	}
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c1a:	490d      	ldr	r1, [pc, #52]	; (8001c50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	; (8001c54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c30:	4c0a      	ldr	r4, [pc, #40]	; (8001c5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c3e:	f7ff ffc9 	bl	8001bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c42:	f001 fb0d 	bl	8003260 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c46:	f7ff fd9f 	bl	8001788 <main>
  bx lr
 8001c4a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c50:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c54:	08003300 	.word	0x08003300
  ldr r2, =_sbss
 8001c58:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001c5c:	20000140 	.word	0x20000140

08001c60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c60:	e7fe      	b.n	8001c60 <ADC1_2_IRQHandler>
	...

08001c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_Init+0x28>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <HAL_Init+0x28>)
 8001c6e:	f043 0310 	orr.w	r3, r3, #16
 8001c72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c74:	2003      	movs	r0, #3
 8001c76:	f000 f923 	bl	8001ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c7a:	200f      	movs	r0, #15
 8001c7c:	f000 f808 	bl	8001c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c80:	f7ff ff20 	bl	8001ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40022000 	.word	0x40022000

08001c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_InitTick+0x54>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_InitTick+0x58>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 f93b 	bl	8001f2a <HAL_SYSTICK_Config>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00e      	b.n	8001cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b0f      	cmp	r3, #15
 8001cc2:	d80a      	bhi.n	8001cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ccc:	f000 f903 	bl	8001ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd0:	4a06      	ldr	r2, [pc, #24]	; (8001cec <HAL_InitTick+0x5c>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e000      	b.n	8001cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000068 	.word	0x20000068
 8001ce8:	20000070 	.word	0x20000070
 8001cec:	2000006c 	.word	0x2000006c

08001cf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_IncTick+0x1c>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_IncTick+0x20>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a03      	ldr	r2, [pc, #12]	; (8001d10 <HAL_IncTick+0x20>)
 8001d02:	6013      	str	r3, [r2, #0]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	20000070 	.word	0x20000070
 8001d10:	2000013c 	.word	0x2000013c

08001d14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return uwTick;
 8001d18:	4b02      	ldr	r3, [pc, #8]	; (8001d24 <HAL_GetTick+0x10>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	2000013c 	.word	0x2000013c

08001d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d44:	4013      	ands	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5a:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	60d3      	str	r3, [r2, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <__NVIC_GetPriorityGrouping+0x18>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	0a1b      	lsrs	r3, r3, #8
 8001d7a:	f003 0307 	and.w	r3, r3, #7
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	db0b      	blt.n	8001db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	f003 021f 	and.w	r2, r3, #31
 8001da4:	4906      	ldr	r1, [pc, #24]	; (8001dc0 <__NVIC_EnableIRQ+0x34>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	2001      	movs	r0, #1
 8001dae:	fa00 f202 	lsl.w	r2, r0, r2
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr
 8001dc0:	e000e100 	.word	0xe000e100

08001dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	db0a      	blt.n	8001dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	490c      	ldr	r1, [pc, #48]	; (8001e10 <__NVIC_SetPriority+0x4c>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	0112      	lsls	r2, r2, #4
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	440b      	add	r3, r1
 8001de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dec:	e00a      	b.n	8001e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4908      	ldr	r1, [pc, #32]	; (8001e14 <__NVIC_SetPriority+0x50>)
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	3b04      	subs	r3, #4
 8001dfc:	0112      	lsls	r2, r2, #4
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	440b      	add	r3, r1
 8001e02:	761a      	strb	r2, [r3, #24]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000e100 	.word	0xe000e100
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f1c3 0307 	rsb	r3, r3, #7
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	bf28      	it	cs
 8001e36:	2304      	movcs	r3, #4
 8001e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d902      	bls.n	8001e48 <NVIC_EncodePriority+0x30>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3b03      	subs	r3, #3
 8001e46:	e000      	b.n	8001e4a <NVIC_EncodePriority+0x32>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43da      	mvns	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e60:	f04f 31ff 	mov.w	r1, #4294967295
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	4313      	orrs	r3, r2
         );
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3724      	adds	r7, #36	; 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e8c:	d301      	bcc.n	8001e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e00f      	b.n	8001eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <SysTick_Config+0x40>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9a:	210f      	movs	r1, #15
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea0:	f7ff ff90 	bl	8001dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <SysTick_Config+0x40>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eaa:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <SysTick_Config+0x40>)
 8001eac:	2207      	movs	r2, #7
 8001eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	e000e010 	.word	0xe000e010

08001ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff2d 	bl	8001d28 <__NVIC_SetPriorityGrouping>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee8:	f7ff ff42 	bl	8001d70 <__NVIC_GetPriorityGrouping>
 8001eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	6978      	ldr	r0, [r7, #20]
 8001ef4:	f7ff ff90 	bl	8001e18 <NVIC_EncodePriority>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff5f 	bl	8001dc4 <__NVIC_SetPriority>
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff35 	bl	8001d8c <__NVIC_EnableIRQ>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ffa2 	bl	8001e7c <SysTick_Config>
 8001f38:	4603      	mov	r3, r0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b08b      	sub	sp, #44	; 0x2c
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f56:	e148      	b.n	80021ea <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f58:	2201      	movs	r2, #1
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	69fa      	ldr	r2, [r7, #28]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	f040 8137 	bne.w	80021e4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4aa3      	ldr	r2, [pc, #652]	; (8002208 <HAL_GPIO_Init+0x2c4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d05e      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001f80:	4aa1      	ldr	r2, [pc, #644]	; (8002208 <HAL_GPIO_Init+0x2c4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d875      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001f86:	4aa1      	ldr	r2, [pc, #644]	; (800220c <HAL_GPIO_Init+0x2c8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d058      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001f8c:	4a9f      	ldr	r2, [pc, #636]	; (800220c <HAL_GPIO_Init+0x2c8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d86f      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001f92:	4a9f      	ldr	r2, [pc, #636]	; (8002210 <HAL_GPIO_Init+0x2cc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d052      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001f98:	4a9d      	ldr	r2, [pc, #628]	; (8002210 <HAL_GPIO_Init+0x2cc>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d869      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001f9e:	4a9d      	ldr	r2, [pc, #628]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d04c      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001fa4:	4a9b      	ldr	r2, [pc, #620]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d863      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001faa:	4a9b      	ldr	r2, [pc, #620]	; (8002218 <HAL_GPIO_Init+0x2d4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d046      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001fb0:	4a99      	ldr	r2, [pc, #612]	; (8002218 <HAL_GPIO_Init+0x2d4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d85d      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001fb6:	2b12      	cmp	r3, #18
 8001fb8:	d82a      	bhi.n	8002010 <HAL_GPIO_Init+0xcc>
 8001fba:	2b12      	cmp	r3, #18
 8001fbc:	d859      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001fbe:	a201      	add	r2, pc, #4	; (adr r2, 8001fc4 <HAL_GPIO_Init+0x80>)
 8001fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc4:	0800203f 	.word	0x0800203f
 8001fc8:	08002019 	.word	0x08002019
 8001fcc:	0800202b 	.word	0x0800202b
 8001fd0:	0800206d 	.word	0x0800206d
 8001fd4:	08002073 	.word	0x08002073
 8001fd8:	08002073 	.word	0x08002073
 8001fdc:	08002073 	.word	0x08002073
 8001fe0:	08002073 	.word	0x08002073
 8001fe4:	08002073 	.word	0x08002073
 8001fe8:	08002073 	.word	0x08002073
 8001fec:	08002073 	.word	0x08002073
 8001ff0:	08002073 	.word	0x08002073
 8001ff4:	08002073 	.word	0x08002073
 8001ff8:	08002073 	.word	0x08002073
 8001ffc:	08002073 	.word	0x08002073
 8002000:	08002073 	.word	0x08002073
 8002004:	08002073 	.word	0x08002073
 8002008:	08002021 	.word	0x08002021
 800200c:	08002035 	.word	0x08002035
 8002010:	4a82      	ldr	r2, [pc, #520]	; (800221c <HAL_GPIO_Init+0x2d8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002016:	e02c      	b.n	8002072 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	623b      	str	r3, [r7, #32]
          break;
 800201e:	e029      	b.n	8002074 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	3304      	adds	r3, #4
 8002026:	623b      	str	r3, [r7, #32]
          break;
 8002028:	e024      	b.n	8002074 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	3308      	adds	r3, #8
 8002030:	623b      	str	r3, [r7, #32]
          break;
 8002032:	e01f      	b.n	8002074 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	330c      	adds	r3, #12
 800203a:	623b      	str	r3, [r7, #32]
          break;
 800203c:	e01a      	b.n	8002074 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d102      	bne.n	800204c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002046:	2304      	movs	r3, #4
 8002048:	623b      	str	r3, [r7, #32]
          break;
 800204a:	e013      	b.n	8002074 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d105      	bne.n	8002060 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002054:	2308      	movs	r3, #8
 8002056:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	611a      	str	r2, [r3, #16]
          break;
 800205e:	e009      	b.n	8002074 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002060:	2308      	movs	r3, #8
 8002062:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	615a      	str	r2, [r3, #20]
          break;
 800206a:	e003      	b.n	8002074 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800206c:	2300      	movs	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
          break;
 8002070:	e000      	b.n	8002074 <HAL_GPIO_Init+0x130>
          break;
 8002072:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2bff      	cmp	r3, #255	; 0xff
 8002078:	d801      	bhi.n	800207e <HAL_GPIO_Init+0x13a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	e001      	b.n	8002082 <HAL_GPIO_Init+0x13e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3304      	adds	r3, #4
 8002082:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	2bff      	cmp	r3, #255	; 0xff
 8002088:	d802      	bhi.n	8002090 <HAL_GPIO_Init+0x14c>
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	e002      	b.n	8002096 <HAL_GPIO_Init+0x152>
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	3b08      	subs	r3, #8
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	210f      	movs	r1, #15
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	fa01 f303 	lsl.w	r3, r1, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	401a      	ands	r2, r3
 80020a8:	6a39      	ldr	r1, [r7, #32]
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	431a      	orrs	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 8090 	beq.w	80021e4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020c4:	4b56      	ldr	r3, [pc, #344]	; (8002220 <HAL_GPIO_Init+0x2dc>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	4a55      	ldr	r2, [pc, #340]	; (8002220 <HAL_GPIO_Init+0x2dc>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6193      	str	r3, [r2, #24]
 80020d0:	4b53      	ldr	r3, [pc, #332]	; (8002220 <HAL_GPIO_Init+0x2dc>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020dc:	4a51      	ldr	r2, [pc, #324]	; (8002224 <HAL_GPIO_Init+0x2e0>)
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	3302      	adds	r3, #2
 80020e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	220f      	movs	r2, #15
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4013      	ands	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a49      	ldr	r2, [pc, #292]	; (8002228 <HAL_GPIO_Init+0x2e4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d00d      	beq.n	8002124 <HAL_GPIO_Init+0x1e0>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a48      	ldr	r2, [pc, #288]	; (800222c <HAL_GPIO_Init+0x2e8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d007      	beq.n	8002120 <HAL_GPIO_Init+0x1dc>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a47      	ldr	r2, [pc, #284]	; (8002230 <HAL_GPIO_Init+0x2ec>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d101      	bne.n	800211c <HAL_GPIO_Init+0x1d8>
 8002118:	2302      	movs	r3, #2
 800211a:	e004      	b.n	8002126 <HAL_GPIO_Init+0x1e2>
 800211c:	2303      	movs	r3, #3
 800211e:	e002      	b.n	8002126 <HAL_GPIO_Init+0x1e2>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_GPIO_Init+0x1e2>
 8002124:	2300      	movs	r3, #0
 8002126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002128:	f002 0203 	and.w	r2, r2, #3
 800212c:	0092      	lsls	r2, r2, #2
 800212e:	4093      	lsls	r3, r2
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002136:	493b      	ldr	r1, [pc, #236]	; (8002224 <HAL_GPIO_Init+0x2e0>)
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	3302      	adds	r3, #2
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d006      	beq.n	800215e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002150:	4b38      	ldr	r3, [pc, #224]	; (8002234 <HAL_GPIO_Init+0x2f0>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4937      	ldr	r1, [pc, #220]	; (8002234 <HAL_GPIO_Init+0x2f0>)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	600b      	str	r3, [r1, #0]
 800215c:	e006      	b.n	800216c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800215e:	4b35      	ldr	r3, [pc, #212]	; (8002234 <HAL_GPIO_Init+0x2f0>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	43db      	mvns	r3, r3
 8002166:	4933      	ldr	r1, [pc, #204]	; (8002234 <HAL_GPIO_Init+0x2f0>)
 8002168:	4013      	ands	r3, r2
 800216a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d006      	beq.n	8002186 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002178:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <HAL_GPIO_Init+0x2f0>)
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	492d      	ldr	r1, [pc, #180]	; (8002234 <HAL_GPIO_Init+0x2f0>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	604b      	str	r3, [r1, #4]
 8002184:	e006      	b.n	8002194 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002186:	4b2b      	ldr	r3, [pc, #172]	; (8002234 <HAL_GPIO_Init+0x2f0>)
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	43db      	mvns	r3, r3
 800218e:	4929      	ldr	r1, [pc, #164]	; (8002234 <HAL_GPIO_Init+0x2f0>)
 8002190:	4013      	ands	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d006      	beq.n	80021ae <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021a0:	4b24      	ldr	r3, [pc, #144]	; (8002234 <HAL_GPIO_Init+0x2f0>)
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	4923      	ldr	r1, [pc, #140]	; (8002234 <HAL_GPIO_Init+0x2f0>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	608b      	str	r3, [r1, #8]
 80021ac:	e006      	b.n	80021bc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021ae:	4b21      	ldr	r3, [pc, #132]	; (8002234 <HAL_GPIO_Init+0x2f0>)
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	491f      	ldr	r1, [pc, #124]	; (8002234 <HAL_GPIO_Init+0x2f0>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d006      	beq.n	80021d6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021c8:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <HAL_GPIO_Init+0x2f0>)
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	4919      	ldr	r1, [pc, #100]	; (8002234 <HAL_GPIO_Init+0x2f0>)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60cb      	str	r3, [r1, #12]
 80021d4:	e006      	b.n	80021e4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021d6:	4b17      	ldr	r3, [pc, #92]	; (8002234 <HAL_GPIO_Init+0x2f0>)
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	43db      	mvns	r3, r3
 80021de:	4915      	ldr	r1, [pc, #84]	; (8002234 <HAL_GPIO_Init+0x2f0>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	3301      	adds	r3, #1
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f47f aeaf 	bne.w	8001f58 <HAL_GPIO_Init+0x14>
  }
}
 80021fa:	bf00      	nop
 80021fc:	bf00      	nop
 80021fe:	372c      	adds	r7, #44	; 0x2c
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	10320000 	.word	0x10320000
 800220c:	10310000 	.word	0x10310000
 8002210:	10220000 	.word	0x10220000
 8002214:	10210000 	.word	0x10210000
 8002218:	10120000 	.word	0x10120000
 800221c:	10110000 	.word	0x10110000
 8002220:	40021000 	.word	0x40021000
 8002224:	40010000 	.word	0x40010000
 8002228:	40010800 	.word	0x40010800
 800222c:	40010c00 	.word	0x40010c00
 8002230:	40011000 	.word	0x40011000
 8002234:	40010400 	.word	0x40010400

08002238 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	887b      	ldrh	r3, [r7, #2]
 800224a:	4013      	ands	r3, r2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
 8002254:	e001      	b.n	800225a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002256:	2300      	movs	r3, #0
 8002258:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800225a:	7bfb      	ldrb	r3, [r7, #15]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr

08002266 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	460b      	mov	r3, r1
 8002270:	807b      	strh	r3, [r7, #2]
 8002272:	4613      	mov	r3, r2
 8002274:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002276:	787b      	ldrb	r3, [r7, #1]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800227c:	887a      	ldrh	r2, [r7, #2]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002282:	e003      	b.n	800228c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002284:	887b      	ldrh	r3, [r7, #2]
 8002286:	041a      	lsls	r2, r3, #16
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	611a      	str	r2, [r3, #16]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr

08002296 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002296:	b480      	push	{r7}
 8002298:	b085      	sub	sp, #20
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	460b      	mov	r3, r1
 80022a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022a8:	887a      	ldrh	r2, [r7, #2]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4013      	ands	r3, r2
 80022ae:	041a      	lsls	r2, r3, #16
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	43d9      	mvns	r1, r3
 80022b4:	887b      	ldrh	r3, [r7, #2]
 80022b6:	400b      	ands	r3, r1
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	611a      	str	r2, [r3, #16]
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e26c      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 8087 	beq.w	80023f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022e8:	4b92      	ldr	r3, [pc, #584]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 030c 	and.w	r3, r3, #12
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d00c      	beq.n	800230e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022f4:	4b8f      	ldr	r3, [pc, #572]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d112      	bne.n	8002326 <HAL_RCC_OscConfig+0x5e>
 8002300:	4b8c      	ldr	r3, [pc, #560]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800230c:	d10b      	bne.n	8002326 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230e:	4b89      	ldr	r3, [pc, #548]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d06c      	beq.n	80023f4 <HAL_RCC_OscConfig+0x12c>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d168      	bne.n	80023f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e246      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800232e:	d106      	bne.n	800233e <HAL_RCC_OscConfig+0x76>
 8002330:	4b80      	ldr	r3, [pc, #512]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a7f      	ldr	r2, [pc, #508]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	e02e      	b.n	800239c <HAL_RCC_OscConfig+0xd4>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0x98>
 8002346:	4b7b      	ldr	r3, [pc, #492]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a7a      	ldr	r2, [pc, #488]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 800234c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	4b78      	ldr	r3, [pc, #480]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a77      	ldr	r2, [pc, #476]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002358:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e01d      	b.n	800239c <HAL_RCC_OscConfig+0xd4>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0xbc>
 800236a:	4b72      	ldr	r3, [pc, #456]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a71      	ldr	r2, [pc, #452]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	4b6f      	ldr	r3, [pc, #444]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a6e      	ldr	r2, [pc, #440]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e00b      	b.n	800239c <HAL_RCC_OscConfig+0xd4>
 8002384:	4b6b      	ldr	r3, [pc, #428]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a6a      	ldr	r2, [pc, #424]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 800238a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	4b68      	ldr	r3, [pc, #416]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a67      	ldr	r2, [pc, #412]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800239a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d013      	beq.n	80023cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7ff fcb6 	bl	8001d14 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ac:	f7ff fcb2 	bl	8001d14 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	; 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e1fa      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	4b5d      	ldr	r3, [pc, #372]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0xe4>
 80023ca:	e014      	b.n	80023f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7ff fca2 	bl	8001d14 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d4:	f7ff fc9e 	bl	8001d14 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	; 0x64
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e1e6      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e6:	4b53      	ldr	r3, [pc, #332]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x10c>
 80023f2:	e000      	b.n	80023f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d063      	beq.n	80024ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002402:	4b4c      	ldr	r3, [pc, #304]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00b      	beq.n	8002426 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800240e:	4b49      	ldr	r3, [pc, #292]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b08      	cmp	r3, #8
 8002418:	d11c      	bne.n	8002454 <HAL_RCC_OscConfig+0x18c>
 800241a:	4b46      	ldr	r3, [pc, #280]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d116      	bne.n	8002454 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	4b43      	ldr	r3, [pc, #268]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_RCC_OscConfig+0x176>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d001      	beq.n	800243e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e1ba      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243e:	4b3d      	ldr	r3, [pc, #244]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4939      	ldr	r1, [pc, #228]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002452:	e03a      	b.n	80024ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d020      	beq.n	800249e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245c:	4b36      	ldr	r3, [pc, #216]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002462:	f7ff fc57 	bl	8001d14 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246a:	f7ff fc53 	bl	8001d14 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e19b      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247c:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002488:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4927      	ldr	r1, [pc, #156]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002498:	4313      	orrs	r3, r2
 800249a:	600b      	str	r3, [r1, #0]
 800249c:	e015      	b.n	80024ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249e:	4b26      	ldr	r3, [pc, #152]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7ff fc36 	bl	8001d14 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ac:	f7ff fc32 	bl	8001d14 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e17a      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024be:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d03a      	beq.n	800254c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d019      	beq.n	8002512 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024de:	4b17      	ldr	r3, [pc, #92]	; (800253c <HAL_RCC_OscConfig+0x274>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e4:	f7ff fc16 	bl	8001d14 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ec:	f7ff fc12 	bl	8001d14 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e15a      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fe:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <HAL_RCC_OscConfig+0x26c>)
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800250a:	2001      	movs	r0, #1
 800250c:	f000 faa6 	bl	8002a5c <RCC_Delay>
 8002510:	e01c      	b.n	800254c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <HAL_RCC_OscConfig+0x274>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002518:	f7ff fbfc 	bl	8001d14 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800251e:	e00f      	b.n	8002540 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002520:	f7ff fbf8 	bl	8001d14 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d908      	bls.n	8002540 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e140      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	42420000 	.word	0x42420000
 800253c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002540:	4b9e      	ldr	r3, [pc, #632]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1e9      	bne.n	8002520 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80a6 	beq.w	80026a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255e:	4b97      	ldr	r3, [pc, #604]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10d      	bne.n	8002586 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	4b94      	ldr	r3, [pc, #592]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	4a93      	ldr	r2, [pc, #588]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002574:	61d3      	str	r3, [r2, #28]
 8002576:	4b91      	ldr	r3, [pc, #580]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002582:	2301      	movs	r3, #1
 8002584:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002586:	4b8e      	ldr	r3, [pc, #568]	; (80027c0 <HAL_RCC_OscConfig+0x4f8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d118      	bne.n	80025c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002592:	4b8b      	ldr	r3, [pc, #556]	; (80027c0 <HAL_RCC_OscConfig+0x4f8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a8a      	ldr	r2, [pc, #552]	; (80027c0 <HAL_RCC_OscConfig+0x4f8>)
 8002598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259e:	f7ff fbb9 	bl	8001d14 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a6:	f7ff fbb5 	bl	8001d14 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b64      	cmp	r3, #100	; 0x64
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e0fd      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b8:	4b81      	ldr	r3, [pc, #516]	; (80027c0 <HAL_RCC_OscConfig+0x4f8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d106      	bne.n	80025da <HAL_RCC_OscConfig+0x312>
 80025cc:	4b7b      	ldr	r3, [pc, #492]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	4a7a      	ldr	r2, [pc, #488]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	6213      	str	r3, [r2, #32]
 80025d8:	e02d      	b.n	8002636 <HAL_RCC_OscConfig+0x36e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10c      	bne.n	80025fc <HAL_RCC_OscConfig+0x334>
 80025e2:	4b76      	ldr	r3, [pc, #472]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	4a75      	ldr	r2, [pc, #468]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	f023 0301 	bic.w	r3, r3, #1
 80025ec:	6213      	str	r3, [r2, #32]
 80025ee:	4b73      	ldr	r3, [pc, #460]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	4a72      	ldr	r2, [pc, #456]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	f023 0304 	bic.w	r3, r3, #4
 80025f8:	6213      	str	r3, [r2, #32]
 80025fa:	e01c      	b.n	8002636 <HAL_RCC_OscConfig+0x36e>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2b05      	cmp	r3, #5
 8002602:	d10c      	bne.n	800261e <HAL_RCC_OscConfig+0x356>
 8002604:	4b6d      	ldr	r3, [pc, #436]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	4a6c      	ldr	r2, [pc, #432]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 800260a:	f043 0304 	orr.w	r3, r3, #4
 800260e:	6213      	str	r3, [r2, #32]
 8002610:	4b6a      	ldr	r3, [pc, #424]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	4a69      	ldr	r2, [pc, #420]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	6213      	str	r3, [r2, #32]
 800261c:	e00b      	b.n	8002636 <HAL_RCC_OscConfig+0x36e>
 800261e:	4b67      	ldr	r3, [pc, #412]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	4a66      	ldr	r2, [pc, #408]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	6213      	str	r3, [r2, #32]
 800262a:	4b64      	ldr	r3, [pc, #400]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4a63      	ldr	r2, [pc, #396]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d015      	beq.n	800266a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263e:	f7ff fb69 	bl	8001d14 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002644:	e00a      	b.n	800265c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002646:	f7ff fb65 	bl	8001d14 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f241 3288 	movw	r2, #5000	; 0x1388
 8002654:	4293      	cmp	r3, r2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e0ab      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265c:	4b57      	ldr	r3, [pc, #348]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0ee      	beq.n	8002646 <HAL_RCC_OscConfig+0x37e>
 8002668:	e014      	b.n	8002694 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266a:	f7ff fb53 	bl	8001d14 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7ff fb4f 	bl	8001d14 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e095      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002688:	4b4c      	ldr	r3, [pc, #304]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1ee      	bne.n	8002672 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002694:	7dfb      	ldrb	r3, [r7, #23]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d105      	bne.n	80026a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269a:	4b48      	ldr	r3, [pc, #288]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	4a47      	ldr	r2, [pc, #284]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 80026a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8081 	beq.w	80027b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026b0:	4b42      	ldr	r3, [pc, #264]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 030c 	and.w	r3, r3, #12
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d061      	beq.n	8002780 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d146      	bne.n	8002752 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c4:	4b3f      	ldr	r3, [pc, #252]	; (80027c4 <HAL_RCC_OscConfig+0x4fc>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ca:	f7ff fb23 	bl	8001d14 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d2:	f7ff fb1f 	bl	8001d14 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e067      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e4:	4b35      	ldr	r3, [pc, #212]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f0      	bne.n	80026d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f8:	d108      	bne.n	800270c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026fa:	4b30      	ldr	r3, [pc, #192]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	492d      	ldr	r1, [pc, #180]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800270c:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a19      	ldr	r1, [r3, #32]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	430b      	orrs	r3, r1
 800271e:	4927      	ldr	r1, [pc, #156]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002724:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <HAL_RCC_OscConfig+0x4fc>)
 8002726:	2201      	movs	r2, #1
 8002728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f7ff faf3 	bl	8001d14 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002732:	f7ff faef 	bl	8001d14 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e037      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002744:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x46a>
 8002750:	e02f      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002752:	4b1c      	ldr	r3, [pc, #112]	; (80027c4 <HAL_RCC_OscConfig+0x4fc>)
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7ff fadc 	bl	8001d14 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002760:	f7ff fad8 	bl	8001d14 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e020      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x498>
 800277e:	e018      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e013      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_RCC_OscConfig+0x4f4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	429a      	cmp	r2, r3
 800279e:	d106      	bne.n	80027ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d001      	beq.n	80027b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40007000 	.word	0x40007000
 80027c4:	42420060 	.word	0x42420060

080027c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0d0      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027dc:	4b6a      	ldr	r3, [pc, #424]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d910      	bls.n	800280c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b67      	ldr	r3, [pc, #412]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 0207 	bic.w	r2, r3, #7
 80027f2:	4965      	ldr	r1, [pc, #404]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b63      	ldr	r3, [pc, #396]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0b8      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d020      	beq.n	800285a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002824:	4b59      	ldr	r3, [pc, #356]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4a58      	ldr	r2, [pc, #352]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800282e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800283c:	4b53      	ldr	r3, [pc, #332]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4a52      	ldr	r2, [pc, #328]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002846:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002848:	4b50      	ldr	r3, [pc, #320]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	494d      	ldr	r1, [pc, #308]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	4313      	orrs	r3, r2
 8002858:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d040      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	4b47      	ldr	r3, [pc, #284]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d115      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e07f      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d107      	bne.n	8002896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002886:	4b41      	ldr	r3, [pc, #260]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e073      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002896:	4b3d      	ldr	r3, [pc, #244]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e06b      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a6:	4b39      	ldr	r3, [pc, #228]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f023 0203 	bic.w	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4936      	ldr	r1, [pc, #216]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b8:	f7ff fa2c 	bl	8001d14 <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c0:	f7ff fa28 	bl	8001d14 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e053      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d6:	4b2d      	ldr	r3, [pc, #180]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 020c 	and.w	r2, r3, #12
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d1eb      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028e8:	4b27      	ldr	r3, [pc, #156]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d210      	bcs.n	8002918 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b24      	ldr	r3, [pc, #144]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 0207 	bic.w	r2, r3, #7
 80028fe:	4922      	ldr	r1, [pc, #136]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b20      	ldr	r3, [pc, #128]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e032      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4916      	ldr	r1, [pc, #88]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	4313      	orrs	r3, r2
 8002934:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002942:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	490e      	ldr	r1, [pc, #56]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	4313      	orrs	r3, r2
 8002954:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002956:	f000 f821 	bl	800299c <HAL_RCC_GetSysClockFreq>
 800295a:	4602      	mov	r2, r0
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	490a      	ldr	r1, [pc, #40]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 8002968:	5ccb      	ldrb	r3, [r1, r3]
 800296a:	fa22 f303 	lsr.w	r3, r2, r3
 800296e:	4a09      	ldr	r2, [pc, #36]	; (8002994 <HAL_RCC_ClockConfig+0x1cc>)
 8002970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_RCC_ClockConfig+0x1d0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff f98a 	bl	8001c90 <HAL_InitTick>

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40022000 	.word	0x40022000
 800298c:	40021000 	.word	0x40021000
 8002990:	080032e0 	.word	0x080032e0
 8002994:	20000068 	.word	0x20000068
 8002998:	2000006c 	.word	0x2000006c

0800299c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800299c:	b490      	push	{r4, r7}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029a2:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xb0>)
 80029a4:	1d3c      	adds	r4, r7, #4
 80029a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029ac:	f240 2301 	movw	r3, #513	; 0x201
 80029b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
 80029ba:	2300      	movs	r3, #0
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029c6:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d002      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x40>
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_GetSysClockFreq+0x46>
 80029da:	e02d      	b.n	8002a38 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029dc:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029de:	623b      	str	r3, [r7, #32]
      break;
 80029e0:	e02d      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	0c9b      	lsrs	r3, r3, #18
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029ee:	4413      	add	r3, r2
 80029f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d013      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a00:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	0c5b      	lsrs	r3, r3, #17
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a0e:	4413      	add	r3, r2
 8002a10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	4a0e      	ldr	r2, [pc, #56]	; (8002a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a1a:	fb02 f203 	mul.w	r2, r2, r3
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
 8002a26:	e004      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	4a0b      	ldr	r2, [pc, #44]	; (8002a58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	623b      	str	r3, [r7, #32]
      break;
 8002a36:	e002      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a3a:	623b      	str	r3, [r7, #32]
      break;
 8002a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3728      	adds	r7, #40	; 0x28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc90      	pop	{r4, r7}
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	080032d0 	.word	0x080032d0
 8002a50:	40021000 	.word	0x40021000
 8002a54:	007a1200 	.word	0x007a1200
 8002a58:	003d0900 	.word	0x003d0900

08002a5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a64:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <RCC_Delay+0x34>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a0a      	ldr	r2, [pc, #40]	; (8002a94 <RCC_Delay+0x38>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	0a5b      	lsrs	r3, r3, #9
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	fb02 f303 	mul.w	r3, r2, r3
 8002a76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a78:	bf00      	nop
  }
  while (Delay --);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1e5a      	subs	r2, r3, #1
 8002a7e:	60fa      	str	r2, [r7, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f9      	bne.n	8002a78 <RCC_Delay+0x1c>
}
 8002a84:	bf00      	nop
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	20000068 	.word	0x20000068
 8002a94:	10624dd3 	.word	0x10624dd3

08002a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e041      	b.n	8002b2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff f832 	bl	8001b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	f000 fa6a 	bl	8002fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d001      	beq.n	8002b50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e035      	b.n	8002bbc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0201 	orr.w	r2, r2, #1
 8002b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a16      	ldr	r2, [pc, #88]	; (8002bc8 <HAL_TIM_Base_Start_IT+0x90>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d009      	beq.n	8002b86 <HAL_TIM_Base_Start_IT+0x4e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7a:	d004      	beq.n	8002b86 <HAL_TIM_Base_Start_IT+0x4e>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a12      	ldr	r2, [pc, #72]	; (8002bcc <HAL_TIM_Base_Start_IT+0x94>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d111      	bne.n	8002baa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b06      	cmp	r3, #6
 8002b96:	d010      	beq.n	8002bba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba8:	e007      	b.n	8002bba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0201 	orr.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40012c00 	.word	0x40012c00
 8002bcc:	40000400 	.word	0x40000400

08002bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d122      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d11b      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0202 	mvn.w	r2, #2
 8002bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f9b1 	bl	8002f7a <HAL_TIM_IC_CaptureCallback>
 8002c18:	e005      	b.n	8002c26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f9a4 	bl	8002f68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f9b3 	bl	8002f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d122      	bne.n	8002c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d11b      	bne.n	8002c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f06f 0204 	mvn.w	r2, #4
 8002c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2202      	movs	r2, #2
 8002c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f987 	bl	8002f7a <HAL_TIM_IC_CaptureCallback>
 8002c6c:	e005      	b.n	8002c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f97a 	bl	8002f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f989 	bl	8002f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d122      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d11b      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0208 	mvn.w	r2, #8
 8002ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2204      	movs	r2, #4
 8002caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f95d 	bl	8002f7a <HAL_TIM_IC_CaptureCallback>
 8002cc0:	e005      	b.n	8002cce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f950 	bl	8002f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f95f 	bl	8002f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	2b10      	cmp	r3, #16
 8002ce0:	d122      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b10      	cmp	r3, #16
 8002cee:	d11b      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0210 	mvn.w	r2, #16
 8002cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2208      	movs	r2, #8
 8002cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f933 	bl	8002f7a <HAL_TIM_IC_CaptureCallback>
 8002d14:	e005      	b.n	8002d22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f926 	bl	8002f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f935 	bl	8002f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d10e      	bne.n	8002d54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d107      	bne.n	8002d54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0201 	mvn.w	r2, #1
 8002d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7fe ff46 	bl	8001be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5e:	2b80      	cmp	r3, #128	; 0x80
 8002d60:	d10e      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6c:	2b80      	cmp	r3, #128	; 0x80
 8002d6e:	d107      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fa67 	bl	800324e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8a:	2b40      	cmp	r3, #64	; 0x40
 8002d8c:	d10e      	bne.n	8002dac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d98:	2b40      	cmp	r3, #64	; 0x40
 8002d9a:	d107      	bne.n	8002dac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f8f9 	bl	8002f9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	d10e      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d107      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0220 	mvn.w	r2, #32
 8002dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fa32 	bl	800323c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_TIM_ConfigClockSource+0x18>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e0b3      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x180>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e30:	d03e      	beq.n	8002eb0 <HAL_TIM_ConfigClockSource+0xd0>
 8002e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e36:	f200 8087 	bhi.w	8002f48 <HAL_TIM_ConfigClockSource+0x168>
 8002e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3e:	f000 8085 	beq.w	8002f4c <HAL_TIM_ConfigClockSource+0x16c>
 8002e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e46:	d87f      	bhi.n	8002f48 <HAL_TIM_ConfigClockSource+0x168>
 8002e48:	2b70      	cmp	r3, #112	; 0x70
 8002e4a:	d01a      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0xa2>
 8002e4c:	2b70      	cmp	r3, #112	; 0x70
 8002e4e:	d87b      	bhi.n	8002f48 <HAL_TIM_ConfigClockSource+0x168>
 8002e50:	2b60      	cmp	r3, #96	; 0x60
 8002e52:	d050      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x116>
 8002e54:	2b60      	cmp	r3, #96	; 0x60
 8002e56:	d877      	bhi.n	8002f48 <HAL_TIM_ConfigClockSource+0x168>
 8002e58:	2b50      	cmp	r3, #80	; 0x50
 8002e5a:	d03c      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0xf6>
 8002e5c:	2b50      	cmp	r3, #80	; 0x50
 8002e5e:	d873      	bhi.n	8002f48 <HAL_TIM_ConfigClockSource+0x168>
 8002e60:	2b40      	cmp	r3, #64	; 0x40
 8002e62:	d058      	beq.n	8002f16 <HAL_TIM_ConfigClockSource+0x136>
 8002e64:	2b40      	cmp	r3, #64	; 0x40
 8002e66:	d86f      	bhi.n	8002f48 <HAL_TIM_ConfigClockSource+0x168>
 8002e68:	2b30      	cmp	r3, #48	; 0x30
 8002e6a:	d064      	beq.n	8002f36 <HAL_TIM_ConfigClockSource+0x156>
 8002e6c:	2b30      	cmp	r3, #48	; 0x30
 8002e6e:	d86b      	bhi.n	8002f48 <HAL_TIM_ConfigClockSource+0x168>
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	d060      	beq.n	8002f36 <HAL_TIM_ConfigClockSource+0x156>
 8002e74:	2b20      	cmp	r3, #32
 8002e76:	d867      	bhi.n	8002f48 <HAL_TIM_ConfigClockSource+0x168>
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d05c      	beq.n	8002f36 <HAL_TIM_ConfigClockSource+0x156>
 8002e7c:	2b10      	cmp	r3, #16
 8002e7e:	d05a      	beq.n	8002f36 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e80:	e062      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6899      	ldr	r1, [r3, #8]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f000 f95c 	bl	800314e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ea4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	609a      	str	r2, [r3, #8]
      break;
 8002eae:	e04e      	b.n	8002f4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	6899      	ldr	r1, [r3, #8]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f000 f945 	bl	800314e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ed2:	609a      	str	r2, [r3, #8]
      break;
 8002ed4:	e03b      	b.n	8002f4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6859      	ldr	r1, [r3, #4]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f000 f8bc 	bl	8003060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2150      	movs	r1, #80	; 0x50
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 f913 	bl	800311a <TIM_ITRx_SetConfig>
      break;
 8002ef4:	e02b      	b.n	8002f4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	6859      	ldr	r1, [r3, #4]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	461a      	mov	r2, r3
 8002f04:	f000 f8da 	bl	80030bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2160      	movs	r1, #96	; 0x60
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 f903 	bl	800311a <TIM_ITRx_SetConfig>
      break;
 8002f14:	e01b      	b.n	8002f4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	6859      	ldr	r1, [r3, #4]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	461a      	mov	r2, r3
 8002f24:	f000 f89c 	bl	8003060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2140      	movs	r1, #64	; 0x40
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 f8f3 	bl	800311a <TIM_ITRx_SetConfig>
      break;
 8002f34:	e00b      	b.n	8002f4e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4610      	mov	r0, r2
 8002f42:	f000 f8ea 	bl	800311a <TIM_ITRx_SetConfig>
        break;
 8002f46:	e002      	b.n	8002f4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f48:	bf00      	nop
 8002f4a:	e000      	b.n	8002f4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr

08002f7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a25      	ldr	r2, [pc, #148]	; (8003058 <TIM_Base_SetConfig+0xa8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d007      	beq.n	8002fd8 <TIM_Base_SetConfig+0x28>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fce:	d003      	beq.n	8002fd8 <TIM_Base_SetConfig+0x28>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a22      	ldr	r2, [pc, #136]	; (800305c <TIM_Base_SetConfig+0xac>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d108      	bne.n	8002fea <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a1a      	ldr	r2, [pc, #104]	; (8003058 <TIM_Base_SetConfig+0xa8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d007      	beq.n	8003002 <TIM_Base_SetConfig+0x52>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff8:	d003      	beq.n	8003002 <TIM_Base_SetConfig+0x52>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a17      	ldr	r2, [pc, #92]	; (800305c <TIM_Base_SetConfig+0xac>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d108      	bne.n	8003014 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	4313      	orrs	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a07      	ldr	r2, [pc, #28]	; (8003058 <TIM_Base_SetConfig+0xa8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d103      	bne.n	8003048 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	691a      	ldr	r2, [r3, #16]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	615a      	str	r2, [r3, #20]
}
 800304e:	bf00      	nop
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr
 8003058:	40012c00 	.word	0x40012c00
 800305c:	40000400 	.word	0x40000400

08003060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	f023 0201 	bic.w	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800308a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f023 030a 	bic.w	r3, r3, #10
 800309c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	621a      	str	r2, [r3, #32]
}
 80030b2:	bf00      	nop
 80030b4:	371c      	adds	r7, #28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f023 0210 	bic.w	r2, r3, #16
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	031b      	lsls	r3, r3, #12
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	621a      	str	r2, [r3, #32]
}
 8003110:	bf00      	nop
 8003112:	371c      	adds	r7, #28
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr

0800311a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800311a:	b480      	push	{r7}
 800311c:	b085      	sub	sp, #20
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	f043 0307 	orr.w	r3, r3, #7
 800313c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	609a      	str	r2, [r3, #8]
}
 8003144:	bf00      	nop
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr

0800314e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800314e:	b480      	push	{r7}
 8003150:	b087      	sub	sp, #28
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
 800315a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003168:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	021a      	lsls	r2, r3, #8
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	431a      	orrs	r2, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	4313      	orrs	r3, r2
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	609a      	str	r2, [r3, #8]
}
 8003182:	bf00      	nop
 8003184:	371c      	adds	r7, #28
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e041      	b.n	8003228 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a14      	ldr	r2, [pc, #80]	; (8003234 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d009      	beq.n	80031fc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f0:	d004      	beq.n	80031fc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a10      	ldr	r2, [pc, #64]	; (8003238 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d10c      	bne.n	8003216 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003202:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	4313      	orrs	r3, r2
 800320c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40012c00 	.word	0x40012c00
 8003238:	40000400 	.word	0x40000400

0800323c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <__libc_init_array>:
 8003260:	b570      	push	{r4, r5, r6, lr}
 8003262:	2600      	movs	r6, #0
 8003264:	4d0c      	ldr	r5, [pc, #48]	; (8003298 <__libc_init_array+0x38>)
 8003266:	4c0d      	ldr	r4, [pc, #52]	; (800329c <__libc_init_array+0x3c>)
 8003268:	1b64      	subs	r4, r4, r5
 800326a:	10a4      	asrs	r4, r4, #2
 800326c:	42a6      	cmp	r6, r4
 800326e:	d109      	bne.n	8003284 <__libc_init_array+0x24>
 8003270:	f000 f822 	bl	80032b8 <_init>
 8003274:	2600      	movs	r6, #0
 8003276:	4d0a      	ldr	r5, [pc, #40]	; (80032a0 <__libc_init_array+0x40>)
 8003278:	4c0a      	ldr	r4, [pc, #40]	; (80032a4 <__libc_init_array+0x44>)
 800327a:	1b64      	subs	r4, r4, r5
 800327c:	10a4      	asrs	r4, r4, #2
 800327e:	42a6      	cmp	r6, r4
 8003280:	d105      	bne.n	800328e <__libc_init_array+0x2e>
 8003282:	bd70      	pop	{r4, r5, r6, pc}
 8003284:	f855 3b04 	ldr.w	r3, [r5], #4
 8003288:	4798      	blx	r3
 800328a:	3601      	adds	r6, #1
 800328c:	e7ee      	b.n	800326c <__libc_init_array+0xc>
 800328e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003292:	4798      	blx	r3
 8003294:	3601      	adds	r6, #1
 8003296:	e7f2      	b.n	800327e <__libc_init_array+0x1e>
 8003298:	080032f8 	.word	0x080032f8
 800329c:	080032f8 	.word	0x080032f8
 80032a0:	080032f8 	.word	0x080032f8
 80032a4:	080032fc 	.word	0x080032fc

080032a8 <memset>:
 80032a8:	4603      	mov	r3, r0
 80032aa:	4402      	add	r2, r0
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d100      	bne.n	80032b2 <memset+0xa>
 80032b0:	4770      	bx	lr
 80032b2:	f803 1b01 	strb.w	r1, [r3], #1
 80032b6:	e7f9      	b.n	80032ac <memset+0x4>

080032b8 <_init>:
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ba:	bf00      	nop
 80032bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032be:	bc08      	pop	{r3}
 80032c0:	469e      	mov	lr, r3
 80032c2:	4770      	bx	lr

080032c4 <_fini>:
 80032c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c6:	bf00      	nop
 80032c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ca:	bc08      	pop	{r3}
 80032cc:	469e      	mov	lr, r3
 80032ce:	4770      	bx	lr
